{"version":3,"sources":["webpack:///../packages/hooks/node_modules/rxjs/dist/esm5/internal/observable/interval.js","webpack:///../packages/hooks/useObservableRefresh/index.mdx"],"names":["interval","period","scheduler","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","take","Button","Typography","useObservableRefresh","pipe","value","completed","refresh","toString","onClick","variant","isMDXComponent"],"mappings":"8FAAA,8DAEO,SAASA,EAASC,EAAQC,GAa/B,YAZe,IAAXD,IACFA,EAAS,QAGO,IAAdC,IACFA,EAAY,KAGVD,EAAS,IACXA,EAAS,GAGJ,YAAMA,EAAQA,EAAQC,K,mSCDlBC,EAAe,Q,+NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,kBACE,GAAM,wBADR,wBAGA,2BAAU,sBAAQC,WAAW,KAAnB,iBAAV,4FACA,kBACE,GAAM,aADR,aAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,6QAcL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,qXAAwXC,SAAO,GAChaL,QACAH,kBACAS,eACAf,aACAgB,SACAC,WACAC,eACAC,0BARga,gBAShab,IATga,EAUhaH,eAVga,GAW/ZO,QAAQ,eACZ,WACK,MAA2CS,aAAqB,kBAAMnB,YAAS,KAAMoB,KAAKJ,YAAK,OAAM,IAA9FK,EAAP,KAAqBC,GAArB,WAAgCC,EAAhC,KACA,OAAO,uBACP,YAAC,IAAD,CAAYb,QAAQ,cAApB,UAAyCW,GACzC,YAAC,IAAD,CAAYX,QAAQ,cAApB,cAA6CY,EAAUE,YACvD,YAAC,IAAD,CAAQC,QAASF,EAASG,QAAQ,OAAOhB,QAAQ,UAAjD,eAMJ,kBACE,GAAM,YADR,YAGA,sBACE,kBAAIC,WAAW,MAAK,sBAAQA,WAAW,MAAnB,SAApB,oEAAmI,sBAAQA,WAAW,MAAnB,oBAAnI,OAAgM,sBAAQA,WAAW,MAAnB,yBAAhM,6JAGA,kBAAIA,WAAW,MAAf,wBAA6C,sBAAQA,WAAW,MAAnB,aAA7C,sDAEF,kBACE,GAAM,wBADR,wBAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,0iB,6NAmBTJ,EAAWoB,gBAAiB","file":"component---packages-hooks-use-observable-refresh-index-mdx-401f8f59045b2401e1c1.js","sourcesContent":["import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period, scheduler) {\n  if (period === void 0) {\n    period = 0;\n  }\n\n  if (scheduler === void 0) {\n    scheduler = asyncScheduler;\n  }\n\n  if (period < 0) {\n    period = 0;\n  }\n\n  return timer(period, period, scheduler);\n}","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { interval } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport Button from '@eduzz/houston-ui/Button';\nimport Typography from '@eduzz/houston-ui/Typography';\nimport useObservableRefresh from '.';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"useobservablerefresh\"\n    }}>{`useObservableRefresh`}</h1>\n    <p>{`Um `}<strong parentName=\"p\">{`useObservable`}</strong>{` que retorna uma função de refresh para recarregar, útil na trativa de erros ou refresh.`}</p>\n    <h2 {...{\n      \"id\": \"como-usar\"\n    }}>{`Como usar`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [value, error, completed, loading, refresh] = useObservableRefresh(() => userService.get(), []);\n\nreturn (\n  <div>\n    {loading ? 'Carregando' : ''}\n    {value}\n    <Button onClick={refresh} variant='text'>\n      Refresh\n    </Button>\n  </div>\n);\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [value, error, completed, refresh] = useObservableRefresh(\\n    () => interval(1000).pipe(take(10)),\\n    [],\\n  )\\n  return (\\n    <div>\\n      <Typography>Value: {value}</Typography>\\n      <Typography>Completed: {completed.toString()}</Typography>\\n      <Button onClick={refresh} variant=\\\"text\\\">\\n        Refresh\\n      </Button>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      interval,\n      take,\n      Button,\n      Typography,\n      useObservableRefresh,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, error, completed, refresh] = useObservableRefresh(() => interval(1000).pipe(take(10)), []);\n        return <div>\n        <Typography mdxType=\"Typography\">Value: {value}</Typography>\n        <Typography mdxType=\"Typography\">Completed: {completed.toString()}</Typography>\n        <Button onClick={refresh} variant='text' mdxType=\"Button\">\n          Refresh\n        </Button>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"cuidados\"\n    }}>{`Cuidados`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Erros`}</strong>{` ocorridos serão automaticamentes logados (não tratados) se as o `}<strong parentName=\"li\">{`onUnhandledError`}</strong>{` no `}<strong parentName=\"li\">{`setHoustonHooksConfig`}</strong>{`\nfor setado, mas se utilizar o operador catchError esse erro não será logado pois foi previamente tratado,\nnesse caso o log deve ser feito manualmente.`}</li>\n      <li parentName=\"ul\">{`O valor inicial será `}<strong parentName=\"li\">{`undefined`}</strong>{`, lembre-se de tratar isso quando estiver usando.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"parâmetros-e-retorno\"\n    }}>{`Parâmetros e Retorno`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/**\n * @param observableGenerator Função que retorna um Observable\n * @param deps Lista de dependências\n * @returns [\n *    value: valor de retorno do Observable,\n *    error: se ocorrer um erro, ele será passado aqui,\n *    complete: boolean se o observable foi completado ou não,\n *    loading: boolean se esta carregando ou não,\n *    refresh: function para recarregar\n * ]\n */\nexport default useObservableRefresh<T>(observableGenerator: () => Observable<T>, deps: React.DependencyList): [T, any, boolean, boolean, () => void];\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}