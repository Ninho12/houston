{"version":3,"sources":["webpack:///../packages/eslint-config/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"uPAQaA,G,UAAe,S,mNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,iBADR,iBAGA,0LAEA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,eADZ,wSAIL,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,wEAOL,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,0GAOL,kBACE,GAAM,aADR,aAGA,gFAA+D,sBAAQA,WAAW,KAAnB,+BAA/D,4GAC+D,sBAAQA,WAAW,KAAnB,aAD/D,KAEA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,uSAYL,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,UAGA,kBAAIA,WAAW,KACb,MAAS,MADX,YAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,kBAGA,kBAAIA,WAAW,KACb,MAAS,MADX,4BAEkC,uBAFlC,2BAEoE,uBAFpE,2EAMN,qBAAG,sBAAQA,WAAW,KAAnB,6G,iNAKPJ,EAAWK,gBAAiB","file":"component---packages-eslint-config-readme-mdx-5938c78cbb5102727118.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"eslint-config\"\n    }}>{`ESLint Config`}</h1>\n    <p>{`Para configurar no padrão do Houston, primerio você deve adicionar as dependências, pois o eslint exige que plugins devem,\nser adicionados no projeto principal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`yarn add --dev @eduzz/eslint-config-houston @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-prettier eslint-plugin-eslint-plugin eslint-plugin-import-helpers eslint-plugin-prettier eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-unused-imports prettier\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`// .eslintrc\n{\n  \"extends\": [\"@eduzz/eslint-config-houston\"]\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// .prettierrc.js\nmodule.exports = {\n  ...require('@eduzz/eslint-config-houston/.prettierrc')\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"generator\"\n    }}>{`Generator`}</h2>\n    <p>{`Para que o eslint verifique e aplica a regra correta do `}<strong parentName=\"p\">{`react-hooks/exhaustive-deps`}</strong>{` é preciso adicionar seus custom hooks\nnas regras do .eslintrc, para facilitar esse processo criamos um `}<strong parentName=\"p\">{`generator`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// .eslintrc.js <~precisa ser .js\nconst generator = require('@eduzz/eslint-config-houston/generator');\n\nmodule.exports = {\n  extends: ['@eduzz/eslint-config-houston'],\n  rules: {\n    'react-hooks/exhaustive-deps': generator.exhaustiveDeps('warn', ['useMyCustomHook', true])\n  }\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Método`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Params`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`exhaustiveDeps`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`1. 'warn' `}{`|`}{` 'error'`}<br />{`2. Array com seus hooks `}<br />{`3. boolean se deve ou não adicionar os hooks do @eduzz/houston-hooks`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`⚠️ Vale ressaltar que os custom hooks devem seguir o padrão de que o segundo parametro seja a deps`}</strong></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}