(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{R8Rz:function(e,r,a){"use strict";a.r(r),a.d(r,"_frontmatter",(function(){return m})),a.d(r,"default",(function(){return O}));var n=a("cxan"),o=a("+wNj"),t=(a("ERkP"),a("ZVZ0")),s=a("9Rvw"),b=a("qbsg"),l=a("gRWN"),i=a("1Z6p"),c=a("x6WP"),u=a("E1Lo"),p=a("vZ6I"),d=(a("l1C2"),["components"]),m={};void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"packages/hooks/useObservableRefresh/index.mdx"}});var f={_frontmatter:m},v=s.a;function O(e){var r,a=e.components,O=Object(o.a)(e,d);return Object(t.b)(v,Object(n.a)({},f,O,{components:a,mdxType:"MDXLayout"}),Object(t.b)("h1",{id:"useobservablerefresh"},"useObservableRefresh"),Object(t.b)("p",null,"Um ",Object(t.b)("strong",{parentName:"p"},"useObservable")," que retorna uma função de refresh para recarregar, útil na trativa de erros ou refresh."),Object(t.b)("h2",{id:"como-usar"},"Como usar"),Object(t.b)("pre",null,Object(t.b)("code",{parentName:"pre",className:"language-tsx"},"const [value, error, completed, loading, refresh] = useObservableRefresh(() => userService.get(), []);\n\nreturn (\n  <div>\n    {loading ? 'Carregando' : ''}\n    {value}\n    <Button onClick={refresh} variant='text'>\n      Refresh\n    </Button>\n  </div>\n);\n")),Object(t.b)(b.c,{__position:0,__code:'() => {\n  const [value, error, completed, refresh] = useObservableRefresh(\n    () => interval(1000).pipe(take(10)),\n    [],\n  )\n  return (\n    <div>\n      <Typography>Value: {value}</Typography>\n      <Typography>Completed: {completed.toString()}</Typography>\n      <Button onClick={refresh} variant="text">\n        Refresh\n      </Button>\n    </div>\n  )\n}',__scope:(r={props:O,DefaultLayout:s.a,Playground:b.c,interval:l.a,take:i.a,Button:c.a,Typography:u.a,useObservableRefresh:p.a},r.DefaultLayout=s.a,r._frontmatter=m,r),mdxType:"Playground"},(function(){var e=Object(p.a)((function(){return Object(l.a)(1e3).pipe(Object(i.a)(10))}),[]),r=e[0],a=(e[1],e[2]),n=e[3];return Object(t.b)("div",null,Object(t.b)(u.a,{mdxType:"Typography"},"Value: ",r),Object(t.b)(u.a,{mdxType:"Typography"},"Completed: ",a.toString()),Object(t.b)(c.a,{onClick:n,variant:"text",mdxType:"Button"},"Refresh"))})),Object(t.b)("h2",{id:"cuidados"},"Cuidados"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("strong",{parentName:"li"},"Erros")," ocorridos serão automaticamentes logados (não tratados) se as o ",Object(t.b)("strong",{parentName:"li"},"onUnhandledError")," no ",Object(t.b)("strong",{parentName:"li"},"setHoustonHooksConfig"),"\nfor setado, mas se utilizar o operador catchError esse erro não será logado pois foi previamente tratado,\nnesse caso o log deve ser feito manualmente."),Object(t.b)("li",{parentName:"ul"},"O valor inicial será ",Object(t.b)("strong",{parentName:"li"},"undefined"),", lembre-se de tratar isso quando estiver usando.")),Object(t.b)("h2",{id:"parâmetros-e-retorno"},"Parâmetros e Retorno"),Object(t.b)("pre",null,Object(t.b)("code",{parentName:"pre",className:"language-ts"},"/**\n * @param observableGenerator Função que retorna um Observable\n * @param deps Lista de dependências\n * @returns [\n *    value: valor de retorno do Observable,\n *    error: se ocorrer um erro, ele será passado aqui,\n *    complete: boolean se o observable foi completado ou não,\n *    loading: boolean se esta carregando ou não,\n *    refresh: function para recarregar\n * ]\n */\nexport default useObservableRefresh<T>(observableGenerator: () => Observable<T>, deps: React.DependencyList): [T, any, boolean, boolean, () => void];\n")))}void 0!==O&&O&&O===Object(O)&&Object.isExtensible(O)&&!O.hasOwnProperty("__filemeta")&&Object.defineProperty(O,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"packages/hooks/useObservableRefresh/index.mdx"}}),O.isMDXComponent=!0}}]);
//# sourceMappingURL=component---packages-hooks-use-observable-refresh-index-mdx-d4227cd9178b5f6242d7.js.map