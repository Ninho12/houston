{"version":3,"sources":["webpack:///../packages/icons/index.mdx"],"names":["_frontmatter","name","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","ThemeProvider","Toast","TextField","Tooltip","Typography","Icon","initialIcons","Object","entries","map","CurrentIcon","icon","size","React","currentIcons","setCurrentIcons","search","setSearch","handleChangeSearch","value","currentValue","toLowerCase","searched","filter","i","startsWith","handleIconClick","iconName","textArea","document","createElement","textToCopy","innerText","body","appendChild","select","execCommand","remove","success","icons","palette","className","onChange","placeholder","endAdornment","length","sort","a","b","localeCompare","index","key","style","cursor","onClick","title","placement","isMDXComponent"],"mappings":"uXAeaA,EAAe,Q,0MAENC,EAKY,cALlC,IAAsBA,EAMhBC,EAAc,CAClBF,gBAEIG,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,kBACE,GAAM,UADR,UAGA,sDACA,kBACE,GAAM,mBADR,mBAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,ysEAA0tEC,SAAO,GAClwEJ,QACAH,kBACAQ,eACAC,kBACAC,UACAC,cACAC,YACAC,eACAC,QATkwE,gBAUlwEd,IAVkwE,EAWlwEJ,eAXkwE,GAYjwEQ,QAAQ,eACZ,WACK,IAAMW,EAAeC,OAAOC,QAAQH,GAAMI,KAAI,gBAAErB,EAAF,KAAQsB,EAAR,WAA0B,CACtEC,KAAM,YAACD,EAAD,CAAaE,KAAM,QAASjB,QAAQ,gBAC1CP,WAEF,EAAwCyB,WAAe,IAAhDC,EAAP,KAAqBC,EAArB,KACA,EAA4BF,WAAe,IAApCG,EAAP,KAAeC,EAAf,KACMC,EAAqBL,eAAkB,SAAAM,GAG3C,GAFAF,EAAUE,IAELA,EAGH,OAFAF,EAAU,SACVF,EAAgB,IAIlB,IAAMK,EAAeD,EAAME,cACrBC,EAAWhB,EAAaiB,QAAO,SAAAC,GAAC,OAAIA,EAAEpC,KAAKiC,cAAcI,WAAWL,IAAiBI,EAAEpC,KAAKiC,gBAAkBD,KACpHL,EAAgBO,KACf,CAAChB,IACEoB,EAAkBb,eAAkB,SAAAc,GACxC,IAAMC,EAAWC,SAASC,cAAc,YAClCC,EAAa,UAAUJ,EAAb,+BAAoDA,EAApD,KAChBC,EAASI,UAAYD,EACrBF,SAASI,KAAKC,YAAYN,GAC1BA,EAASO,SACTN,SAASO,YAAY,QACrBR,EAASS,SACTpC,IAAMqC,QAAN,YAA0BX,EAA1B,yBACC,IACGY,EAAQvB,EAASF,EAAeR,EACtC,OAAO,YAAC,IAAD,CAAekC,QAAS,GAAI7C,QAAQ,iBAC3C,mBAAK8C,UAAU,cACb,YAAC,IAAD,CAAWtB,MAAOH,EAAQ0B,SAAUxB,EAAoByB,YAAY,oBAAoBC,aAAc,YAAC,gBAAD,MAAwBjD,QAAQ,cACrI4C,EAAMM,OAAS,GAAKN,EAAMO,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE3D,KAAK6D,cAAcD,EAAE5D,SAAOqB,KAAI,SAACE,EAAMuC,GAAP,OAAiB,mBAAKC,IAAG,QAAUD,EAAST,UAAU,eAAeW,MAAO,CACpJC,OAAQ,WACPC,QAAS,kBAAM5B,EAAgBf,EAAKvB,QAChCuB,EAAKA,KACN,YAAC,IAAD,CAAS4C,MAAO5C,EAAKvB,KAAMoE,UAAU,SAAS7D,QAAQ,WACpD,mBAAK8C,UAAU,QAAQ9B,EAAKvB,WAGpB,IAAjBmD,EAAMM,QAAgB,YAAC,IAAD,CAAYlD,QAAQ,cAApB,yC,wMASjCH,EAAWiE,gBAAiB","file":"component---packages-icons-index-mdx-d7406a511239b06aa125.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport ThemeProvider from '@eduzz/houston-ui/styles/ThemeProvider';\nimport Toast from '@eduzz/houston-ui/Toast';\nimport TextField from '../ui-components/Forms/Text';\nimport Tooltip from '../ui-components/Tooltip';\nimport Typography from '../ui-components/Typography';\nimport * as Icon from './';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CurrentIcon = makeShortcode(\"CurrentIcon\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"ícones\"\n    }}>{`Ícones`}</h1>\n    <p>{`Coleção de ícones do Houston.`}</p>\n    <h3 {...{\n      \"id\": \"lista-de-ícones\"\n    }}>{`Lista de ícones`}</h3>\n    <Playground __position={0} __code={'() => {\\n  const initialIcons = Object.entries(Icon).map(([name, CurrentIcon]) => ({\\n    icon: <CurrentIcon size={\\'large\\'} />,\\n    name,\\n  }))\\n  const [currentIcons, setCurrentIcons] = React.useState([])\\n  const [search, setSearch] = React.useState(\\'\\')\\n  const handleChangeSearch = React.useCallback(\\n    value => {\\n      setSearch(value)\\n      if (!value) {\\n        setSearch(\\'\\')\\n        setCurrentIcons([])\\n        return\\n      }\\n      const currentValue = value.toLowerCase()\\n      const searched = initialIcons.filter(\\n        i =>\\n          i.name.toLowerCase().startsWith(currentValue) ||\\n          i.name.toLowerCase() === currentValue,\\n      )\\n      setCurrentIcons(searched)\\n    },\\n    [initialIcons],\\n  )\\n  const handleIconClick = React.useCallback(iconName => {\\n    const textArea = document.createElement(\\'textarea\\')\\n    const textToCopy = `import ${iconName} from \\'@eduzz/houston-icons/${iconName}\\';`\\n    textArea.innerText = textToCopy\\n    document.body.appendChild(textArea)\\n    textArea.select()\\n    document.execCommand(\\'copy\\')\\n    textArea.remove()\\n    Toast.success(`Copiado \\'${iconName}\\' para o clipboard.`)\\n  }, [])\\n  const icons = search ? currentIcons : initialIcons\\n  return (\\n    <ThemeProvider palette={{}}>\\n      <div className=\\\"list-icons\\\">\\n        <TextField\\n          value={search}\\n          onChange={handleChangeSearch}\\n          placeholder=\\\"Busque por ícones\\\"\\n          endAdornment={<Icon.SearchOutline />}\\n        />\\n        {icons.length > 0 &&\\n          icons\\n            .sort((a, b) => a.name.localeCompare(b.name))\\n            .map((icon, index) => (\\n              <div\\n                key={`icon-${index}`}\\n                className=\\\"icon-preview\\\"\\n                style={{ cursor: \\'pointer\\' }}\\n                onClick={() => handleIconClick(icon.name)}\\n              >\\n                {icon.icon}\\n                <Tooltip title={icon.name} placement=\\\"bottom\\\">\\n                  <div className=\\\"name\\\">{icon.name}</div>\\n                </Tooltip>\\n              </div>\\n            ))}\\n        {icons.length === 0 && (\\n          <Typography>Nenhum ícone encontrado...</Typography>\\n        )}\\n      </div>\\n    </ThemeProvider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      ThemeProvider,\n      Toast,\n      TextField,\n      Tooltip,\n      Typography,\n      Icon,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const initialIcons = Object.entries(Icon).map(([name, CurrentIcon]) => ({\n          icon: <CurrentIcon size={'large'} mdxType=\"CurrentIcon\" />,\n          name\n        }));\n        const [currentIcons, setCurrentIcons] = React.useState([]);\n        const [search, setSearch] = React.useState('');\n        const handleChangeSearch = React.useCallback(value => {\n          setSearch(value);\n\n          if (!value) {\n            setSearch('');\n            setCurrentIcons([]);\n            return;\n          }\n\n          const currentValue = value.toLowerCase();\n          const searched = initialIcons.filter(i => i.name.toLowerCase().startsWith(currentValue) || i.name.toLowerCase() === currentValue);\n          setCurrentIcons(searched);\n        }, [initialIcons]);\n        const handleIconClick = React.useCallback(iconName => {\n          const textArea = document.createElement('textarea');\n          const textToCopy = `import ${iconName} from '@eduzz/houston-icons/${iconName}';`;\n          textArea.innerText = textToCopy;\n          document.body.appendChild(textArea);\n          textArea.select();\n          document.execCommand('copy');\n          textArea.remove();\n          Toast.success(`Copiado '${iconName}' para o clipboard.`);\n        }, []);\n        const icons = search ? currentIcons : initialIcons;\n        return <ThemeProvider palette={{}} mdxType=\"ThemeProvider\">\n        <div className='list-icons'>\n          <TextField value={search} onChange={handleChangeSearch} placeholder='Busque por ícones' endAdornment={<Icon.SearchOutline />} mdxType=\"TextField\" />\n          {icons.length > 0 && icons.sort((a, b) => a.name.localeCompare(b.name)).map((icon, index) => <div key={`icon-${index}`} className='icon-preview' style={{\n              cursor: 'pointer'\n            }} onClick={() => handleIconClick(icon.name)}>\n                  {icon.icon}\n                  <Tooltip title={icon.name} placement='bottom' mdxType=\"Tooltip\">\n                    <div className='name'>{icon.name}</div>\n                  </Tooltip>\n                </div>)}\n          {icons.length === 0 && <Typography mdxType=\"Typography\">Nenhum ícone encontrado...</Typography>}\n        </div>\n      </ThemeProvider>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}