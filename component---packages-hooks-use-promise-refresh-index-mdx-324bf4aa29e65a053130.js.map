{"version":3,"sources":["webpack:///../packages/hooks/usePromiseRefresh/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Button","Typography","usePromiseRefresh","Promise","resolve","setTimeout","value","loading","refresh","toString","onClick","variant","isMDXComponent"],"mappings":"qUAYaA,EAAe,Q,4NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,kBACE,GAAM,qBADR,qBAGA,2BAAU,sBAAQC,WAAW,KAAnB,cAAV,uGACA,kBACE,GAAM,aADR,aAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,6PAcL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,6YAAgZC,SAAO,GACxbL,QACAH,kBACAS,eACAC,WACAC,eACAC,uBANwb,gBAOxbZ,IAPwb,EAQxbH,eARwb,GASvbO,QAAQ,eACZ,WACK,MAAyCQ,aAAkB,kBAAM,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,YAAW,kBAAMD,EAAQ,SAAQ,UAAQ,IAA1HE,EAAP,KAAqBC,GAArB,WAA8BC,EAA9B,KACA,OAAO,uBACP,YAAC,IAAD,CAAYd,QAAQ,cAApB,UAAyCY,GACzC,YAAC,IAAD,CAAYZ,QAAQ,cAApB,YAA2Ca,EAAQE,YACnD,YAAC,IAAD,CAAQC,QAASF,EAASG,QAAQ,OAAOjB,QAAQ,UAAjD,aAMJ,kBACE,GAAM,YADR,YAGA,sBACE,kBAAIC,WAAW,MAAK,sBAAQA,WAAW,MAAnB,SAApB,oDAAmH,sBAAQA,WAAW,MAAnB,oBAAnH,OAAgL,sBAAQA,WAAW,MAAnB,yBAAhL,iBAEA,kBAAIA,WAAW,MAAf,wBAA6C,sBAAQA,WAAW,MAAnB,aAA7C,sDAEF,kBACE,GAAM,wBADR,wBAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,0c,0NAkBTJ,EAAWqB,gBAAiB","file":"component---packages-hooks-use-promise-refresh-index-mdx-324bf4aa29e65a053130.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport Button from '@eduzz/houston-ui/Button';\nimport Typography from '@eduzz/houston-ui/Typography';\nimport usePromiseRefresh from '.';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"usepromiserefresh\"\n    }}>{`usePromiseRefresh`}</h1>\n    <p>{`Um `}<strong parentName=\"p\">{`usePromise`}</strong>{` que retorna uma função de refresh para recarregar a promisse, útil na trativa de erros ou refresh.`}</p>\n    <h2 {...{\n      \"id\": \"como-usar\"\n    }}>{`Como usar`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [value, error, loading, refresh] = usePromiseRefresh(() => userService.get(), []);\n\nreturn (\n  <div>\n    {loading ? 'Carregando' : ''}\n    {value}\n    <Button onClick={refresh} variant='text'>\n      Reset\n    </Button>\n  </div>\n);\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [value, error, loading, refresh] = usePromiseRefresh(\\n    () => new Promise(resolve => setTimeout(() => resolve(\\'olá\\'), 2000)),\\n    [],\\n  )\\n  return (\\n    <div>\\n      <Typography>Value: {value}</Typography>\\n      <Typography>Loading: {loading.toString()}</Typography>\\n      <Button onClick={refresh} variant=\\\"text\\\">\\n        Reset\\n      </Button>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Button,\n      Typography,\n      usePromiseRefresh,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, error, loading, refresh] = usePromiseRefresh(() => new Promise(resolve => setTimeout(() => resolve('olá'), 2000)), []);\n        return <div>\n        <Typography mdxType=\"Typography\">Value: {value}</Typography>\n        <Typography mdxType=\"Typography\">Loading: {loading.toString()}</Typography>\n        <Button onClick={refresh} variant='text' mdxType=\"Button\">\n          Reset\n        </Button>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"cuidados\"\n    }}>{`Cuidados`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Erros`}</strong>{` ocorridos serão automaticamentes logados e as o `}<strong parentName=\"li\">{`onUnhandledError`}</strong>{` no `}<strong parentName=\"li\">{`setHoustonHooksConfig`}</strong>{`\nfor setado.`}</li>\n      <li parentName=\"ul\">{`O valor inicial será `}<strong parentName=\"li\">{`undefined`}</strong>{`, lembre-se de tratar isso quando estiver usando.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"parâmetros-e-retorno\"\n    }}>{`Parâmetros e Retorno`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/**\n * @param promiseGenerator Função que retorna uma Promise\n * @param deps Lista de dependências\n * @returns [\n *    value: valor de retorno do Promise,\n *    error: se ocorrer um erro, ele será passado aqui,\n *    loading: boolean se esta carregando ou não,\n *    refresh: function to refresh the data\n * ]\n */\nexport default usePromiseRefresh<T>(promiseGenerator: () => Promise<any>, deps: React.DependencyList): [T, any, boolean];\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}