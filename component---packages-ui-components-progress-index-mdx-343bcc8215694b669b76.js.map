{"version":3,"sources":["webpack:///../packages/ui-components/Progress/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","AccountCircleIcon","AddAPhotoIcon","LinkIcon","Playground","Box","Button","Column","Container","Row","useProgress","ProgressLine","ProgressRound","nextStep","backStep","setCurrentStep","currentStep","steps","label","xs","style","margin","length","onClick","variant","disabled","icon","error","padding","maxSteps","type","isMDXComponent"],"mappings":"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","file":"component---packages-ui-components-progress-index-mdx-343bcc8215694b669b76.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\nimport LinkIcon from '@material-ui/icons/Link';\nimport { Playground } from 'docz';\nimport Box from '../Box';\nimport Button from '../Button';\nimport Column from '../Grid/Column';\nimport Container from '../Grid/Container';\nimport Row from '../Grid/Row';\nimport { useProgress } from './';\nimport ProgressLine from './Line';\nimport ProgressRound from './Round';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"progress\"\n    }}>{`Progress`}</h1>\n    <p>{`São usados para transmitir progresso através de etapas numeradas. Ele fornece um fluxo de trabalho com etapas.`}</p>\n    <h2 {...{\n      \"id\": \"line\"\n    }}>{`Line`}</h2>\n    <h3 {...{\n      \"id\": \"importação\"\n    }}>{`Importação`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import ProgressLine from '@eduzz/houston-ui/Progress/Line';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"exemplo\"\n    }}>{`Exemplo`}</h3>\n    <Playground __position={0} __code={'() => {\\n  const { nextStep, backStep, setCurrentStep, currentStep } = useProgress()\\n  const steps = [\\n    {\\n      label: \\'Dados pessoais\\',\\n    },\\n    {\\n      label: \\'Endereço\\',\\n    },\\n    {\\n      label: \\'Pagamento\\',\\n    },\\n    {\\n      label: \\'Obrigado\\',\\n    },\\n  ]\\n  const handleReset = () => setCurrentStep(0)\\n  return (\\n    <Container>\\n      <Row>\\n        <Column xs={12}>\\n          <ProgressLine steps={steps} currentStep={currentStep} />\\n        </Column>\\n      </Row>\\n      <div style={{ margin: \\'16px 0\\' }} />\\n      <Row>\\n        {currentStep === steps.length && (\\n          <Column>\\n            <Button onClick={handleReset} variant=\\\"text\\\">\\n              Resetar\\n            </Button>\\n          </Column>\\n        )}\\n        {currentStep !== steps.length && (\\n          <>\\n            <Column>\\n              <Button onClick={backStep} disabled={currentStep === 0}>\\n                Anterior\\n              </Button>\\n            </Column>\\n            <Column>\\n              <Button\\n                onClick={nextStep}\\n                disabled={currentStep === steps.length}\\n              >\\n                Próximo\\n              </Button>\\n            </Column>\\n          </>\\n        )}\\n      </Row>\\n    </Container>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      AccountCircleIcon,\n      AddAPhotoIcon,\n      LinkIcon,\n      Playground,\n      Box,\n      Button,\n      Column,\n      Container,\n      Row,\n      useProgress,\n      ProgressLine,\n      ProgressRound,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const {\n          nextStep,\n          backStep,\n          setCurrentStep,\n          currentStep\n        } = useProgress();\n        const steps = [{\n          label: 'Dados pessoais'\n        }, {\n          label: 'Endereço'\n        }, {\n          label: 'Pagamento'\n        }, {\n          label: 'Obrigado'\n        }];\n\n        const handleReset = () => setCurrentStep(0);\n\n        return <Container mdxType=\"Container\">\n        <Row mdxType=\"Row\">\n          <Column xs={12} mdxType=\"Column\">\n            <ProgressLine steps={steps} currentStep={currentStep} mdxType=\"ProgressLine\" />\n          </Column>\n        </Row>\n        <div style={{\n            margin: '16px 0'\n          }} />\n        <Row mdxType=\"Row\">\n          {currentStep === steps.length && <Column mdxType=\"Column\">\n              <Button onClick={handleReset} variant='text' mdxType=\"Button\">\n                Resetar\n              </Button>\n            </Column>}\n          {currentStep !== steps.length && <>\n              <Column mdxType=\"Column\">\n                <Button onClick={backStep} disabled={currentStep === 0} mdxType=\"Button\">\n                  Anterior\n                </Button>\n              </Column>\n              <Column mdxType=\"Column\">\n                <Button onClick={nextStep} disabled={currentStep === steps.length} mdxType=\"Button\">\n                  Próximo\n                </Button>\n              </Column>\n            </>}\n        </Row>\n      </Container>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"com-ícones\"\n    }}>{`Com ícones`}</h3>\n    <Playground __position={1} __code={'() => {\\n  const { nextStep, backStep, setCurrentStep, currentStep } = useProgress()\\n  const steps = [\\n    {\\n      label: \\'Criar conta\\',\\n      icon: <AccountCircleIcon />,\\n    },\\n    {\\n      label: \\'Adicionar foto\\',\\n      icon: <AddAPhotoIcon />,\\n    },\\n    {\\n      label: \\'Compartilhe com amigos\\',\\n      icon: <LinkIcon />,\\n    },\\n  ]\\n  const handleReset = () => setCurrentStep(0)\\n  return (\\n    <Container>\\n      <Row>\\n        <Column xs={12}>\\n          <ProgressLine steps={steps} currentStep={currentStep} />\\n        </Column>\\n      </Row>\\n      <div style={{ margin: \\'16px 0\\' }} />\\n      <Row>\\n        {currentStep === steps.length && (\\n          <Column>\\n            <Button onClick={handleReset} variant=\\\"text\\\">\\n              Resetar\\n            </Button>\\n          </Column>\\n        )}\\n        {currentStep !== steps.length && (\\n          <>\\n            <Column>\\n              <Button onClick={backStep} disabled={currentStep === 0}>\\n                Anterior\\n              </Button>\\n            </Column>\\n            <Column>\\n              <Button\\n                onClick={nextStep}\\n                disabled={currentStep === steps.length}\\n              >\\n                Próximo\\n              </Button>\\n            </Column>\\n          </>\\n        )}\\n      </Row>\\n    </Container>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      AccountCircleIcon,\n      AddAPhotoIcon,\n      LinkIcon,\n      Playground,\n      Box,\n      Button,\n      Column,\n      Container,\n      Row,\n      useProgress,\n      ProgressLine,\n      ProgressRound,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const {\n          nextStep,\n          backStep,\n          setCurrentStep,\n          currentStep\n        } = useProgress();\n        const steps = [{\n          label: 'Criar conta',\n          icon: <AccountCircleIcon mdxType=\"AccountCircleIcon\" />\n        }, {\n          label: 'Adicionar foto',\n          icon: <AddAPhotoIcon mdxType=\"AddAPhotoIcon\" />\n        }, {\n          label: 'Compartilhe com amigos',\n          icon: <LinkIcon mdxType=\"LinkIcon\" />\n        }];\n\n        const handleReset = () => setCurrentStep(0);\n\n        return <Container mdxType=\"Container\">\n        <Row mdxType=\"Row\">\n          <Column xs={12} mdxType=\"Column\">\n            <ProgressLine steps={steps} currentStep={currentStep} mdxType=\"ProgressLine\" />\n          </Column>\n        </Row>\n        <div style={{\n            margin: '16px 0'\n          }} />\n        <Row mdxType=\"Row\">\n          {currentStep === steps.length && <Column mdxType=\"Column\">\n              <Button onClick={handleReset} variant='text' mdxType=\"Button\">\n                Resetar\n              </Button>\n            </Column>}\n          {currentStep !== steps.length && <>\n              <Column mdxType=\"Column\">\n                <Button onClick={backStep} disabled={currentStep === 0} mdxType=\"Button\">\n                  Anterior\n                </Button>\n              </Column>\n              <Column mdxType=\"Column\">\n                <Button onClick={nextStep} disabled={currentStep === steps.length} mdxType=\"Button\">\n                  Próximo\n                </Button>\n              </Column>\n            </>}\n        </Row>\n      </Container>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"etapa-de-erro\"\n    }}>{`Etapa de erro`}</h3>\n    <Playground __position={2} __code={'() => {\\n  const { nextStep, backStep, setCurrentStep, currentStep } = useProgress()\\n  const steps = [\\n    {\\n      label: \\'Configuração da campanha\\',\\n    },\\n    {\\n      label: \\'Grupo de campanha\\',\\n      error: true,\\n    },\\n    {\\n      label: \\'Pagamento\\',\\n    },\\n    {\\n      label: \\'Obrigado\\',\\n    },\\n  ]\\n  const handleReset = () => setCurrentStep(0)\\n  return (\\n    <Container>\\n      <Row>\\n        <Column xs={12}>\\n          <ProgressLine steps={steps} currentStep={currentStep} />\\n        </Column>\\n      </Row>\\n      <Box xs={{ margin: \\'16px 0\\' }} />\\n      <Row>\\n        {currentStep === steps.length && (\\n          <Column>\\n            <Button onClick={handleReset} variant=\\\"text\\\">\\n              Resetar\\n            </Button>\\n          </Column>\\n        )}\\n        {currentStep !== steps.length && (\\n          <>\\n            <Column>\\n              <Button onClick={backStep} disabled={currentStep === 0}>\\n                Anterior\\n              </Button>\\n            </Column>\\n            <Column>\\n              <Button\\n                onClick={nextStep}\\n                disabled={currentStep === steps.length}\\n              >\\n                Próximo\\n              </Button>\\n            </Column>\\n          </>\\n        )}\\n      </Row>\\n    </Container>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      AccountCircleIcon,\n      AddAPhotoIcon,\n      LinkIcon,\n      Playground,\n      Box,\n      Button,\n      Column,\n      Container,\n      Row,\n      useProgress,\n      ProgressLine,\n      ProgressRound,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const {\n          nextStep,\n          backStep,\n          setCurrentStep,\n          currentStep\n        } = useProgress();\n        const steps = [{\n          label: 'Configuração da campanha'\n        }, {\n          label: 'Grupo de campanha',\n          error: true\n        }, {\n          label: 'Pagamento'\n        }, {\n          label: 'Obrigado'\n        }];\n\n        const handleReset = () => setCurrentStep(0);\n\n        return <Container mdxType=\"Container\">\n        <Row mdxType=\"Row\">\n          <Column xs={12} mdxType=\"Column\">\n            <ProgressLine steps={steps} currentStep={currentStep} mdxType=\"ProgressLine\" />\n          </Column>\n        </Row>\n        <Box xs={{\n            margin: '16px 0'\n          }} mdxType=\"Box\" />\n        <Row mdxType=\"Row\">\n          {currentStep === steps.length && <Column mdxType=\"Column\">\n              <Button onClick={handleReset} variant='text' mdxType=\"Button\">\n                Resetar\n              </Button>\n            </Column>}\n          {currentStep !== steps.length && <>\n              <Column mdxType=\"Column\">\n                <Button onClick={backStep} disabled={currentStep === 0} mdxType=\"Button\">\n                  Anterior\n                </Button>\n              </Column>\n              <Column mdxType=\"Column\">\n                <Button onClick={nextStep} disabled={currentStep === steps.length} mdxType=\"Button\">\n                  Próximo\n                </Button>\n              </Column>\n            </>}\n        </Row>\n      </Container>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"propriedades\"\n    }}>{`Propriedades`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface IStep {\n  icon?: React.ReactNode;\n  label?: string;\n  error?: boolean;\n}\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`tipo`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`obrigatório`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`padrão`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`steps`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`IStep[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`currentStep`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"round\"\n    }}>{`Round`}</h2>\n    <h3 {...{\n      \"id\": \"importação-1\"\n    }}>{`Importação`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import ProgressRound from '@eduzz/houston-ui/Progress/Round';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"exemplo-1\"\n    }}>{`Exemplo`}</h3>\n    <Playground __position={3} __code={'() => {\\n  const MAX_STEPS = 4\\n  const { nextStep, backStep, setCurrentStep, currentStep } = useProgress()\\n  const handleReset = () => setCurrentStep(0)\\n  return (\\n    <>\\n      <Row>\\n        <Column>\\n          <Box xs={{ padding: \\'20px 0\\' }}>\\n            <ProgressRound maxSteps={MAX_STEPS} currentStep={currentStep} />\\n          </Box>\\n        </Column>\\n        <Column>\\n          <Box xs={{ padding: \\'20px 0\\' }}>\\n            <ProgressRound\\n              type=\\\"percentage\\\"\\n              maxSteps={MAX_STEPS}\\n              currentStep={currentStep}\\n            />\\n          </Box>\\n        </Column>\\n      </Row>\\n      <Row>\\n        {currentStep === MAX_STEPS && (\\n          <Column>\\n            <Button onClick={handleReset} variant=\\\"text\\\">\\n              Resetar\\n            </Button>\\n          </Column>\\n        )}\\n        {currentStep !== MAX_STEPS && (\\n          <>\\n            <Column>\\n              <Button onClick={backStep} disabled={currentStep === 0}>\\n                Anterior\\n              </Button>\\n            </Column>\\n            <Column>\\n              <Button onClick={nextStep} disabled={currentStep === MAX_STEPS}>\\n                Próximo\\n              </Button>\\n            </Column>\\n          </>\\n        )}\\n      </Row>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      AccountCircleIcon,\n      AddAPhotoIcon,\n      LinkIcon,\n      Playground,\n      Box,\n      Button,\n      Column,\n      Container,\n      Row,\n      useProgress,\n      ProgressLine,\n      ProgressRound,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const MAX_STEPS = 4;\n        const {\n          nextStep,\n          backStep,\n          setCurrentStep,\n          currentStep\n        } = useProgress();\n\n        const handleReset = () => setCurrentStep(0);\n\n        return <>\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <Box xs={{\n                padding: '20px 0'\n              }} mdxType=\"Box\">\n              <ProgressRound maxSteps={MAX_STEPS} currentStep={currentStep} mdxType=\"ProgressRound\" />\n            </Box>\n          </Column>\n          <Column mdxType=\"Column\">\n            <Box xs={{\n                padding: '20px 0'\n              }} mdxType=\"Box\">\n              <ProgressRound type='percentage' maxSteps={MAX_STEPS} currentStep={currentStep} mdxType=\"ProgressRound\" />\n            </Box>\n          </Column>\n        </Row>\n        <Row mdxType=\"Row\">\n          {currentStep === MAX_STEPS && <Column mdxType=\"Column\">\n              <Button onClick={handleReset} variant='text' mdxType=\"Button\">\n                Resetar\n              </Button>\n            </Column>}\n          {currentStep !== MAX_STEPS && <>\n              <Column mdxType=\"Column\">\n                <Button onClick={backStep} disabled={currentStep === 0} mdxType=\"Button\">\n                  Anterior\n                </Button>\n              </Column>\n              <Column mdxType=\"Column\">\n                <Button onClick={nextStep} disabled={currentStep === MAX_STEPS} mdxType=\"Button\">\n                  Próximo\n                </Button>\n              </Column>\n            </>}\n        </Row>\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"erro-no-progresso\"\n    }}>{`Erro no progresso`}</h3>\n    <Playground __position={4} __code={'<Row>\\n  <Column>\\n    <Box xs={{ padding: \\'20px 0\\' }}>\\n      <ProgressRound maxSteps={4} currentStep={2} error />\\n    </Box>\\n  </Column>\\n  <Column>\\n    <Box xs={{ padding: \\'20px 0\\' }}>\\n      <ProgressRound type=\\\"percentage\\\" maxSteps={4} currentStep={2} error />\\n    </Box>\\n  </Column>\\n</Row>'} __scope={{\n      props,\n      DefaultLayout,\n      AccountCircleIcon,\n      AddAPhotoIcon,\n      LinkIcon,\n      Playground,\n      Box,\n      Button,\n      Column,\n      Container,\n      Row,\n      useProgress,\n      ProgressLine,\n      ProgressRound,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Row mdxType=\"Row\">\n    <Column mdxType=\"Column\">\n      <Box xs={{\n            padding: '20px 0'\n          }} mdxType=\"Box\">\n        <ProgressRound maxSteps={4} currentStep={2} error mdxType=\"ProgressRound\" />\n      </Box>\n    </Column>\n    <Column mdxType=\"Column\">\n      <Box xs={{\n            padding: '20px 0'\n          }} mdxType=\"Box\">\n        <ProgressRound type='percentage' maxSteps={4} currentStep={2} error mdxType=\"ProgressRound\" />\n      </Box>\n    </Column>\n  </Row>\n    </Playground>\n    <h3 {...{\n      \"id\": \"propriedades-1\"\n    }}>{`Propriedades`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`tipo`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`obrigatório`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`padrão`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`descrição`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maxSteps`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Indica o número máximo de passos do progresso`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`currentStep`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Indica o passo atual do progresso`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`numeric`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`percentage`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`numeric`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Indica como vai ser exibido o progresso no componente: número ou porcentagem`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`error`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Se `}<inlineCode parentName=\"td\">{`true`}</inlineCode>{`, altera a cor do progresso para cor de erro da paleta de cores`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}