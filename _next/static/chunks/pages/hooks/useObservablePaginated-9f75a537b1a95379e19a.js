(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6637],{10783:function(e,a,r){"use strict";r.r(a),r.d(a,{meta:function(){return i},default:function(){return u}});var n=r(87397),o=r(31750),t=(r(27378),r(35318)),s=["components"],i={name:"useObservablePaginated",tableOfContents:{depth:0,children:[{depth:1,slug:"#useobservablepaginated",title:"useObservablePaginated",children:[{depth:2,slug:"#como-usar",title:"Como usar"},{depth:2,slug:"#cuidados",title:"Cuidados"},{depth:2,slug:"#par\xe2metros-e-retorno",title:"Par\xe2metros e Retorno"}]}]}},l={meta:i};function u(e){var a=e.components,r=(0,o.Z)(e,s);return(0,t.kt)("wrapper",(0,n.Z)({},l,r,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"useobservablepaginated"},"useObservablePaginated"),(0,t.kt)("p",null,"Hook para facilitar o uso de um observable paginado, d\xe1 Subscribe e retorna\no resultado junto com fun\xe7\xf5es de manipula\xe7\xe3o dos parametros."),(0,t.kt)("h2",{id:"como-usar"},"Como usar"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-tsx"},"const { params, handleChangePage, handleChangePerPage, handleSort, result, total, isLoading } = useObservablePaginated(\n  {\n    initialParams: { page: 1, perPage: 5 }, // optional\n    infinityScroll: false, // optional\n    onChangeParams: params => salesService.list(params)\n  },\n  []\n);\n")),(0,t.kt)("h2",{id:"cuidados"},"Cuidados"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("strong",{parentName:"li"},"Erros")," ocorridos ser\xe3o automaticamentes logados (n\xe3o tratados) se as o ",(0,t.kt)("strong",{parentName:"li"},"onUnhandledError")," no ",(0,t.kt)("strong",{parentName:"li"},"setHoustonHooksConfig"),"\nfor setado, mas se utilizar o operador catchError esse erro n\xe3o ser\xe1 logado pois foi previamente tratado,\nnesse caso o log deve ser feito manualmente.")),(0,t.kt)("h2",{id:"par\xe2metros-e-retorno"},"Par\xe2metros e Retorno"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * @param options `IUsePaginatedOptions`: {\n *  initialParams: Estado inicial dos param\xeatros\n *  infinityScroll: Se os resultados devem ser mergeado, criando uma lista infinita.\n *  onChangeParams: Fun\xe7\xe3o que recebe os param\xeatros e retorna um Observable\n * }\n * @param deps React deps\n * @returns `IUsePaginatedObservable`: {\n *  params: P / Json com os parametros\n *  initialParams: Partial<P> / Json com os parametros iniciais, \xfatil para um reset de filtros\n *  isLoading: boolean; / Se est\xe1 carregando ou n\xe3o\n *  isLoadingMore: boolean; / Se est\xe1 carregando mais ou n\xe3o, \xfatil para o infinityScroll\n *  total: number; / N\xfamero total de linhas retornadas, apenas a requisi\xe7\xe3o da pagina inicial \xe9 necess\xe1rio retornar o total, as outras paginas podem retonar null\n *  result: R[]; / Array com o resultado\n *  hasMore: boolean; / Se existe mais para ser carregado, calculado com base do total, \xfatil para o infinityScroll\n *  error: any; / Error, se aconteceu algum\n *  retry: () => void; / Fun\xe7\xe3o de retry\n *  updateInitialParams: React.Dispatch<React.SetStateAction<P>>; / \xdatil para alterar o reset de um filtro\n *  mergeParams: (params: PaginationMergeParams<P>) => void; / Fun\xe7\xe3o para atualizar os paramentros pode ser o valor em s\xed o uma fun\xe7\xe3o que recebe o valor atual\n *  handleChangePage: (page: number) => void; / Fun\xe7\xe3o de atalho para o mergeParams({ page: 1})\n *  handleChangePerPage: (perPage: number) => void; / Fun\xe7\xe3o de atalho para o mergeParams({ perPge: 1})\n *  handleSort: (sort: IPaginationParams['sort']) => void; / Fun\xe7\xe3o de atalho para o mergeParams({ sort: { field: 'name', direction: 'asc' }  })\n * }\n */\nexport default function useObservablePaginated<P extends IPaginationParams, R>(options: IUsePaginatedOptions<P, R>, , deps: React.DependencyList): IUsePaginatedObservable<P, R>\n")))}u.isMDXComponent=!0;var d={editThisPagePath:"src/pages/hooks/useObservablePaginated/index.mdx"};for(var p in d)window[p]=d[p]},14768:function(e,a,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useObservablePaginated",function(){return r(10783)}])},87397:function(e,a,r){"use strict";function n(){return(n=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var r=arguments[a];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}r.d(a,{Z:function(){return n}})},31750:function(e,a,r){"use strict";function n(e,a){if(null==e)return{};var r,n,o=function(e,a){if(null==e)return{};var r,n,o={},t=Object.keys(e);for(n=0;n<t.length;n++)r=t[n],a.indexOf(r)>=0||(o[r]=e[r]);return o}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(n=0;n<t.length;n++)r=t[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}r.d(a,{Z:function(){return n}})}},function(e){e.O(0,[9774,2888,179],(function(){return a=14768,e(e.s=a);var a}));var a=e.O();_N_E=a}]);