{"version":3,"sources":["webpack:///../packages/hooks/useObservable/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","useState","useCallback","Playground","interval","of","delay","take","Button","Typography","useObservable","reset","setReset","pipe","value","completed","onReset","Date","now","toString","onClick","variant","name","user","loading","isMDXComponent"],"mappings":"qXAeaA,EAAe,Q,wNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAO5E,kBACE,GAAM,iBADR,iBAGA,sLACuC,sBAAQC,WAAW,KAAnB,qDACvC,kBACE,GAAM,aADR,aAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,gLAWL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,+cAAkdC,SAAO,GAC1fL,QACAH,kBACAS,oBACAC,0BACAC,eACAC,aACAC,OACAC,UACAC,SACAC,WACAC,eACAC,mBAZ0f,gBAa1flB,IAb0f,EAc1fH,eAd0f,GAezfO,QAAQ,eACZ,WACK,MAA0BK,qBAAnBU,EAAP,KAAcC,EAAd,KACA,EAAkCF,aAAc,kBAAMN,YAAS,KAAMS,KAAKN,YAAK,OAAM,CAACI,IAA/EG,EAAP,KAAqBC,GAArB,WACMC,EAAUd,uBAAY,kBAAMU,EAASK,KAAKC,SAAQ,IACxD,OAAO,uBACP,YAAC,IAAD,CAAYtB,QAAQ,cAApB,UAAyCkB,GACzC,YAAC,IAAD,CAAYlB,QAAQ,cAApB,cAA6CmB,EAAUI,YACvD,YAAC,IAAD,CAAQC,QAASJ,EAASK,QAAQ,OAAOzB,QAAQ,UAAjD,aAMJ,kBACE,GAAM,YADR,YAGA,sBACE,kBAAIC,WAAW,MAAK,sBAAQA,WAAW,MAAnB,SAApB,oEAAmI,sBAAQA,WAAW,MAAnB,oBAAnI,OAAgM,sBAAQA,WAAW,MAAnB,yBAAhM,6JAGA,kBAAIA,WAAW,MAAf,wBAA6C,sBAAQA,WAAW,MAAnB,aAA7C,sDAEF,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,2eAA8eC,SAAO,GACthBL,QACAH,kBACAS,oBACAC,0BACAC,eACAC,aACAC,OACAC,UACAC,SACAC,WACAC,eACAC,mBAZshB,gBAathBlB,IAbshB,EActhBH,eAdshB,GAerhBO,QAAQ,eACZ,WACK,MAA0BK,qBAAnBU,EAAP,KAAcC,EAAd,KACA,EAA0CF,aAAc,kBAAML,YAAG,CAC/DiB,KAAM,UACLT,KAAKP,YAAM,QAAQ,CAACK,IAFhBY,EAAP,KAA+BC,GAA/B,gBAGMR,EAAUd,uBAAY,kBAAMU,EAASK,KAAKC,SAAQ,IACxD,OAAO,uBACP,YAAC,IAAD,CAAYtB,QAAQ,cAApB,UAAyC2B,GAAQA,EAAKD,MACtD,YAAC,IAAD,CAAY1B,QAAQ,cAApB,YAA2C4B,EAAQL,YACnD,YAAC,IAAD,CAAQC,QAASJ,EAASK,QAAQ,OAAOzB,QAAQ,UAAjD,aAMJ,kBACE,GAAM,wBADR,wBAGA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,eADZ,6e,sNAkBTJ,EAAWgC,gBAAiB","file":"component---packages-hooks-use-observable-index-mdx-b8c61f7278fec4dfdf20.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState, useCallback } from 'react';\nimport { Playground } from 'docz';\nimport { interval, of } from 'rxjs';\nimport { delay, take } from 'rxjs/operators';\nimport Button from '@eduzz/houston-ui/Button';\nimport Typography from '@eduzz/houston-ui/Typography';\nimport useObservable from '.';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"useobservable\"\n    }}>{`useObservable`}</h1>\n    <p>{`Dá Subscribe e retorna o resultado de um Observable e quando o componente desmonta (unmount) também dá unsubscribe,\ndiminuindo assim o risco de Memory Leak. `}<strong parentName=\"p\">{`Como useEffect que retorna o valor do Observable`}</strong></p>\n    <h2 {...{\n      \"id\": \"como-usar\"\n    }}>{`Como usar`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [value, error, completed, loading] = useObservable(() => userService.get(), []);\n\nreturn (\n  <div>\n    {loading ? 'Carregando' : ''}\n    {value}\n  </div>\n);\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [reset, setReset] = useState()\\n  const [value, error, completed] = useObservable(\\n    () => interval(1000).pipe(take(10)),\\n    [reset],\\n  )\\n  const onReset = useCallback(() => setReset(Date.now()), [])\\n  return (\\n    <div>\\n      <Typography>Value: {value}</Typography>\\n      <Typography>Completed: {completed.toString()}</Typography>\\n      <Button onClick={onReset} variant=\\\"text\\\">\\n        Reset\\n      </Button>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      useCallback,\n      Playground,\n      interval,\n      of,\n      delay,\n      take,\n      Button,\n      Typography,\n      useObservable,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [reset, setReset] = useState();\n        const [value, error, completed] = useObservable(() => interval(1000).pipe(take(10)), [reset]);\n        const onReset = useCallback(() => setReset(Date.now()), []);\n        return <div>\n        <Typography mdxType=\"Typography\">Value: {value}</Typography>\n        <Typography mdxType=\"Typography\">Completed: {completed.toString()}</Typography>\n        <Button onClick={onReset} variant='text' mdxType=\"Button\">\n          Reset\n        </Button>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"cuidados\"\n    }}>{`Cuidados`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Erros`}</strong>{` ocorridos serão automaticamentes logados (não tratados) se as o `}<strong parentName=\"li\">{`onUnhandledError`}</strong>{` no `}<strong parentName=\"li\">{`setHoustonHooksConfig`}</strong>{`\nfor setado, mas se utilizar o operador catchError esse erro não será logado pois foi previamente tratado,\nnesse caso o log deve ser feito manualmente.`}</li>\n      <li parentName=\"ul\">{`O valor inicial será `}<strong parentName=\"li\">{`undefined`}</strong>{`, lembre-se de tratar isso quando estiver usando:`}</li>\n    </ul>\n    <Playground __position={1} __code={'() => {\\n  const [reset, setReset] = useState()\\n  const [user, error, completed, loading] = useObservable(\\n    () => of({ name: \\'Eduzz\\' }).pipe(delay(2000)),\\n    [reset],\\n  )\\n  const onReset = useCallback(() => setReset(Date.now()), [])\\n  return (\\n    <div>\\n      <Typography>Value: {user && user.name}</Typography>\\n      <Typography>Loading: {loading.toString()}</Typography>\\n      <Button onClick={onReset} variant=\\\"text\\\">\\n        Reset\\n      </Button>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      useCallback,\n      Playground,\n      interval,\n      of,\n      delay,\n      take,\n      Button,\n      Typography,\n      useObservable,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [reset, setReset] = useState();\n        const [user, error, completed, loading] = useObservable(() => of({\n          name: 'Eduzz'\n        }).pipe(delay(2000)), [reset]);\n        const onReset = useCallback(() => setReset(Date.now()), []);\n        return <div>\n        <Typography mdxType=\"Typography\">Value: {user && user.name}</Typography>\n        <Typography mdxType=\"Typography\">Loading: {loading.toString()}</Typography>\n        <Button onClick={onReset} variant='text' mdxType=\"Button\">\n          Reset\n        </Button>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"parâmetros-e-retorno\"\n    }}>{`Parâmetros e Retorno`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/**\n * @param observableGenerator Função que retorna um Observable\n * @param deps Lista de dependências\n * @returns [\n *    value: valor de retorno do Observable,\n *    error: se ocorrer um erro, ele será passado aqui,\n *    complete: boolean se o observable foi completado ou não,\n *    loading: boolean se esta carregando ou não\n * ]\n */\nexport default useObservable<T>(observableGenerator: () => Observable<T>, deps: React.DependencyList): [T, any, boolean, boolean];\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}