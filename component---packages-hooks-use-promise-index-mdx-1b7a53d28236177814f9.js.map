{"version":3,"sources":["webpack:///../packages/hooks/usePromise/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","useState","useCallback","Button","Typography","Playground","usePromise","reset","setReset","Promise","resolve","setTimeout","value","loading","onReset","Date","now","toString","onClick","variant","isMDXComponent"],"mappings":"wSAaaA,G,UAAe,S,qNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAO5E,kBACE,GAAM,cADR,cAGA,oLACuC,sBAAQC,WAAW,KAAnB,kDACvC,kBACE,GAAM,aADR,aAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,6KAWL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,yeAA4eC,SAAO,GACphBL,QACAH,kBACAS,oBACAC,0BACAC,WACAC,eACAC,eACAC,gBARohB,gBASphBd,IATohB,EAUphBH,eAVohB,GAWnhBO,QAAQ,eACZ,WACK,MAA0BK,qBAAnBM,EAAP,KAAcC,EAAd,KACA,EAAgCF,aAAW,kBAAM,IAAIG,SAAQ,SAAAC,GAAO,OAAIC,YAAW,kBAAMD,EAAQ,SAAQ,UAAQ,CAACH,IAA3GK,EAAP,KAAqBC,GAArB,WACMC,EAAUZ,uBAAY,kBAAMM,EAASO,KAAKC,SAAQ,IACxD,OAAO,uBACP,YAAC,IAAD,CAAYpB,QAAQ,cAApB,UAAyCgB,GACzC,YAAC,IAAD,CAAYhB,QAAQ,cAApB,YAA2CiB,EAAQI,YACnD,YAAC,IAAD,CAAQC,QAASJ,EAASK,QAAQ,OAAOvB,QAAQ,UAAjD,aAMJ,kBACE,GAAM,YADR,YAGA,sBACE,kBAAIC,WAAW,MAAK,sBAAQA,WAAW,MAAnB,SAApB,oDAAmH,sBAAQA,WAAW,MAAnB,oBAAnH,OAAgL,sBAAQA,WAAW,MAAnB,yBAAhL,iBAEA,kBAAIA,WAAW,MAAf,wBAA6C,sBAAQA,WAAW,MAAnB,aAA7C,sDAEF,kBACE,GAAM,wBADR,wBAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,qZ,mNAiBTJ,EAAW2B,gBAAiB","file":"component---packages-hooks-use-promise-index-mdx-1b7a53d28236177814f9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState, useCallback } from 'react';\nimport Button from '@eduzz/houston-ui/Button';\nimport Typography from '@eduzz/houston-ui/Typography';\nimport { Playground } from 'docz';\nimport usePromise from '.';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"usepromise\"\n    }}>{`usePromise`}</h1>\n    <p>{`Dá Subscribe e retorna o resultado de uma promise e quando o componente desmonta (unmount) também dá unsubscribe,\ndiminuindo assim o risco de Memory Leak. `}<strong parentName=\"p\">{`Como useEffect que retorna o valor da Promise`}</strong></p>\n    <h2 {...{\n      \"id\": \"como-usar\"\n    }}>{`Como usar`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [value, error, completed, loading] = usePromise(() => userService.get(), []);\n\nreturn (\n  <div>\n    {loading ? 'Carregando' : ''}\n    {value}\n  </div>\n);\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [reset, setReset] = useState()\\n  const [value, error, loading] = usePromise(\\n    () => new Promise(resolve => setTimeout(() => resolve(\\'olá\\'), 2000)),\\n    [reset],\\n  )\\n  const onReset = useCallback(() => setReset(Date.now()), [])\\n  return (\\n    <div>\\n      <Typography>Value: {value}</Typography>\\n      <Typography>Loading: {loading.toString()}</Typography>\\n      <Button onClick={onReset} variant=\\\"text\\\">\\n        Reset\\n      </Button>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      useCallback,\n      Button,\n      Typography,\n      Playground,\n      usePromise,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [reset, setReset] = useState();\n        const [value, error, loading] = usePromise(() => new Promise(resolve => setTimeout(() => resolve('olá'), 2000)), [reset]);\n        const onReset = useCallback(() => setReset(Date.now()), []);\n        return <div>\n        <Typography mdxType=\"Typography\">Value: {value}</Typography>\n        <Typography mdxType=\"Typography\">Loading: {loading.toString()}</Typography>\n        <Button onClick={onReset} variant='text' mdxType=\"Button\">\n          Reset\n        </Button>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"cuidados\"\n    }}>{`Cuidados`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Erros`}</strong>{` ocorridos serão automaticamentes logados e as o `}<strong parentName=\"li\">{`onUnhandledError`}</strong>{` no `}<strong parentName=\"li\">{`setHoustonHooksConfig`}</strong>{`\nfor setado.`}</li>\n      <li parentName=\"ul\">{`O valor inicial será `}<strong parentName=\"li\">{`undefined`}</strong>{`, lembre-se de tratar isso quando estiver usando.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"parâmetros-e-retorno\"\n    }}>{`Parâmetros e Retorno`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/**\n * @param promiseGenerator Função que retorna uma Promise\n * @param deps Lista de dependências\n * @returns [\n *    value: valor de retorno do Promise,\n *    error: se ocorrer um erro, ele será passado aqui,\n *    loading: boolean se esta carregando ou não\n * ]\n */\nexport default usePromise<T>(promiseGenerator: () => Promise<any>, deps: React.DependencyList): [T, any, boolean];\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}