{"version":3,"sources":["webpack:///../packages/hooks/useBoolean/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Button","Typography","useBoolean","value","toggleValue","toTrue","toFalse","toString","onClick","style","marginLeft","disabled","isMDXComponent"],"mappings":"sUAYaA,EAAe,Q,qNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,kBACE,GAAM,cADR,cAGA,wIACA,kBACE,GAAM,aADR,aAGA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,kEAIL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,ggBAAigBC,SAAO,GACziBL,QACAH,kBACAS,eACAC,WACAC,eACAC,gBANyiB,gBAOziBZ,IAPyiB,EAQziBH,eARyiB,GASxiBO,QAAQ,eACZ,WACK,MAA8CQ,cAAvCC,EAAP,KAAcC,EAAd,KAA2BC,EAA3B,KAAmCC,EAAnC,KACA,OAAO,uBACP,YAAC,IAAD,CAAYZ,QAAQ,cAApB,UAAyCS,EAAMI,YAC/C,YAAC,IAAD,CAAQC,QAASJ,EAAaV,QAAQ,UAAtC,mBACA,oBAAMe,MAAO,CACTC,WAAY,MAEhB,YAAC,IAAD,CAAQF,QAASH,EAAQM,SAAUR,EAAOT,QAAQ,UAAlD,qBAGA,oBAAMe,MAAO,CACTC,WAAY,MAEhB,YAAC,IAAD,CAAQF,QAASF,EAASK,UAAWR,EAAOT,QAAQ,UAApD,0BAMJ,kBACE,GAAM,wBADR,wBAGA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,8S,mNAaTJ,EAAWqB,gBAAiB","file":"component---packages-hooks-use-boolean-index-mdx-c27cb3bfa08e56c82050.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport Button from '@eduzz/houston-ui/Button';\nimport Typography from '@eduzz/houston-ui/Typography';\nimport useBoolean from '.';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"useboolean\"\n    }}>{`useBoolean`}</h1>\n    <p>{`Esse é um hooks apenas para facilitar o uso de booleanos, útil quando deseja passar como callback de uma função`}</p>\n    <h2 {...{\n      \"id\": \"como-usar\"\n    }}>{`Como usar`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [value, toggleValue, toTrue, toFalse] = useBoolean();\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [value, toggleValue, toTrue, toFalse] = useBoolean()\\n  return (\\n    <div>\\n      <Typography>Value: {value.toString()}</Typography>\\n      <Button onClick={toggleValue}>Click to toggle</Button>\\n      <span style={{ marginLeft: 10 }} />\\n      <Button onClick={toTrue} disabled={value}>\\n        Click to set true\\n      </Button>\\n      <span style={{ marginLeft: 10 }} />\\n      <Button onClick={toFalse} disabled={!value}>\\n        Click to set false\\n      </Button>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Button,\n      Typography,\n      useBoolean,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, toggleValue, toTrue, toFalse] = useBoolean();\n        return <div>\n        <Typography mdxType=\"Typography\">Value: {value.toString()}</Typography>\n        <Button onClick={toggleValue} mdxType=\"Button\">Click to toggle</Button>\n        <span style={{\n            marginLeft: 10\n          }} />\n        <Button onClick={toTrue} disabled={value} mdxType=\"Button\">\n          Click to set true\n        </Button>\n        <span style={{\n            marginLeft: 10\n          }} />\n        <Button onClick={toFalse} disabled={!value} mdxType=\"Button\">\n          Click to set false\n        </Button>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"parâmetros-e-retorno\"\n    }}>{`Parâmetros e Retorno`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * Simplify the way to use a boolean state\n * @param initial A boolen of a function that return a  boolean\n * @returns [value, toogleValue, toTrue, toFalse]\n */\nexport default function useBoolean(initial?: boolean | (() => boolean)): [boolean, () => void, () => void, () => void];\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}