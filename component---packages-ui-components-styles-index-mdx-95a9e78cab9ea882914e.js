(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{ji1r:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return l})),t.d(n,"default",(function(){return p}));var a=t("cxan"),o=t("+wNj"),s=(t("ERkP"),t("ZVZ0")),r=t("9Rvw"),i=(t("l1C2"),["components"]),l={};void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"packages/ui-components/styles/index.mdx"}});var c={_frontmatter:l},m=r.a;function p(e){var n=e.components,t=Object(o.a)(e,i);return Object(s.b)(m,Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"tema-e-estilos"},"Tema e Estilos"),Object(s.b)("p",null,"O provedor de temas (ThemeProvider) não substituirá o tema atual do projeto por completo, apenas estilizará os componentes do Houston,\npossibilitando a migração de componentes gradativamente sem interferir na estilização já existente do projeto."),Object(s.b)("h2",{id:"uso"},"Uso"),Object(s.b)("p",null,"No arquivo raiz de seu projeto, defina sua paleta de cores e adicione o provedor da seguinte maneira:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"import ThemeProvider from '@eduzz/houston-ui/styles/ThemeProvider';\n\nconst palette: IThemePalette = {}; // Opcional\n<ThemeProvider palette={palette}>...</ThemeProvider>;\n")),Object(s.b)("h2",{id:"propriedades"},"Propriedades"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"prop"),Object(s.b)("th",{parentName:"tr",align:null},"tipo"),Object(s.b)("th",{parentName:"tr",align:null},"obrigatório"),Object(s.b)("th",{parentName:"tr",align:null},"padrão"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"palette"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("inlineCode",{parentName:"td"},"IThemePalette")),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("inlineCode",{parentName:"td"},"false")),Object(s.b)("td",{parentName:"tr",align:null},"Tema Padrão")))),Object(s.b)("h2",{id:"tema-padrão-ithemepalette"},"Tema padrão (IThemePalette)"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},"{\n  background: {\n    paper: '#fff',\n    default: '#F9FAFB'\n  },\n  common: {\n    black: '#000',\n    white: '#fff'\n  },\n  error: {\n    light: '#FDD9D7',\n    main: '#F44336',\n    dark: '#B8160A',\n    contrastText: '#fff'\n  },\n  grey: {\n    50: '#fafafa',\n    100: '#F9FAFB',\n    200: '#ECEFF1',\n    300: '#B0BEC5',\n    400: '#78909C',\n    500: '#546E7A',\n    600: '#37474F',\n    700: '#373737',\n    800: '#272727',\n    900: '#1E1E1E'\n  },\n  warning: {\n    main: '#FFCA28',\n    dark: '#E5AD00',\n    light: '#FFF4D4',\n    contrastText: '#37474F'\n  },\n  primary: {\n    light: '#9EB5D9',\n    main: '#0D47A1',\n    dark: '#072D83',\n    contrastText: '#fff'\n  },\n  secondary: {\n    light: '#ECEFF1',\n    main: '#78909C',\n    dark: '#37474F',\n    contrastText: '#fff'\n  },\n  info: {\n    light: '#E6F5FC',\n    main: '#039BE5',\n    dark: '#0277B0',\n    contrastText: '#fff'\n  },\n  success: {\n    light: '#D2EBD3',\n    main: '#4caf50',\n    dark: '#388e3c',\n    contrastText: 'rgba(0, 0, 0, 0.87)'\n  },\n  text: {\n    disabled: '#B0BEC5',\n    hint: '#B0BEC5',\n    primary: '#546E7A',\n    secondary: '#78909C'\n  }\n}\n")),Object(s.b)("h2",{id:"criando-estilos-baseados-no-houston"},"Criando Estilos Baseados no Houston"),Object(s.b)("p",null,"Caso seja necessário é possível criar estilos usando o tema do houston como base, existem duas maneiras de fazer isso:"),Object(s.b)("h3",{id:"createusestyleusestyle"},"createUseStyle/useStyle"),Object(s.b)("p",null,"Esse hook utiliza o JSS e cria as classes para a estilização, cada key do json pode ser um json simples ou uma função\nque recebe o theme e as props do componente que irá utilizá-lo."),Object(s.b)("p",null,Object(s.b)("em",{parentName:"p"},"Por causa de uma limitação do Typescript não é possível passar o IProps como generic sem peder a inferência do retorno,"),"\n",Object(s.b)("em",{parentName:"p"},"perdendo assim o autocomplete dos nomes das classes criadas, por isso sugerimos tipar a função os parametros da função com"),"\n",Object(s.b)("em",{parentName:"p"},"o seu IProps conforme o exemplo abaixo")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"import createUseStyle from '@eduzz/houston-ui/styles/createUseStyles';\n\ninterface IProps {\n  success: boolean;\n}\n\nconst useStyle = createUseStyle(theme => ({\n  simple: {\n    color: 'red'\n  },\n  content: (props: IProps) => {\n    return {\n      backgroundColor: props.success ? theme.colors.success.main : theme.colors.error.main\n    };\n  }\n}));\n\nconst ComponentsDev = memo<IProps>(props => {\n  const styles = useStyle(props);\n\n  return (\n    <div className={styles.content}>\n      <span className={styles.simple}>Teste</span>\n      <Button>Teste</Button>\n    </div>\n  );\n});\n")),Object(s.b)("h3",{id:"usehoustontheme"},"useHoustonTheme"),Object(s.b)("p",null,"Caso queria apenas utlizar as variáveis sem criar um estilo é possível utilizar esse hook."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"import useHoustonTheme from '@eduzz/houston-ui/styles/useHoustonTheme';\n\nconst ComponentsDev = memo<IProps>(props => {\n  const theme = useHoustonTheme();\n  return <div>Tamanho: {theme.size()}</div>;\n});\n")),Object(s.b)("h3",{id:"tema-completo"},"Tema completo"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"type HoustonTheme = {\n  fontFamily: 'Open Sans, \"Helvetica Neue\", Arial, sans-serif',\n  radius: (unit = 1) => 4 * unit,\n  spacing: (unit = 4) => 4 * unit,\n  textSize: (size: FontSizes = 'normal') => fontSizes[size],\n  lineHeight: (size: LineHeights = 'normal') => lineHeights[size],\n  fontWeight: (size: FontWeight = 'regular') => fontWeight[size],\n  breakpoints: 'same as MaterialUI',\n  colors: {\n    background: {\n      paper: '#fff',\n      default: '#F9FAFB'\n    },\n    common: {\n      black: '#000',\n      white: '#fff'\n    },\n    error: {\n      light: '#FDD9D7',\n      main: '#F44336',\n      dark: '#B8160A',\n      contrastText: '#fff'\n    },\n    grey: {\n      50: '#fafafa',\n      100: '#F9FAFB',\n      200: '#ECEFF1',\n      300: '#B0BEC5',\n      400: '#78909C',\n      500: '#546E7A',\n      600: '#37474F',\n      700: '#373737',\n      800: '#272727',\n      900: '#1E1E1E'\n    },\n    warning: {\n      main: '#FFCA28',\n      dark: '#E5AD00',\n      light: '#FFF4D4',\n      contrastText: '#37474F'\n    },\n    primary: {\n      light: '#9EB5D9',\n      main: '#0D47A1',\n      dark: '#072D83',\n      contrastText: '#fff'\n    },\n    secondary: {\n      light: '#ECEFF1',\n      main: '#78909C',\n      dark: '#37474F',\n      contrastText: '#fff'\n    },\n    info: {\n      light: '#CDEBFA',\n      main: '#039BE5',\n      dark: '#0277B0',\n      contrastText: '#fff'\n    },\n    success: {\n      light: '#D2EBD3',\n      main: '#4caf50',\n      dark: '#388e3c',\n      contrastText: 'rgba(0, 0, 0, 0.87)'\n    },\n    text: {\n      disabled: '#B0BEC5',\n      hint: '#B0BEC5',\n      primary: '#546E7A',\n      secondary: '#78909C'\n    }\n  }\n}\n")))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"packages/ui-components/styles/index.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---packages-ui-components-styles-index-mdx-95a9e78cab9ea882914e.js.map