{"version":3,"sources":["webpack:///../packages/ui-components/Toast/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","type","variant","__position","__code","__scope","Hint","Playground","Button","Column","Row","ThemeProvider","Toast","palette","onClick","success","handleShowToast","React","options","onOpen","console","log","onClose","error","info","isMDXComponent"],"mappings":"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","file":"component---packages-ui-components-toast-index-mdx-8163df871170bf49042c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Hint } from '@nejcm/docz-theme-extended';\nimport { Playground } from 'docz';\nimport Button from '../Button';\nimport Column from '../Grid/Column';\nimport Row from '../Grid/Row';\nimport ThemeProvider from '../ThemeProvider';\nimport Toast from './';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"toast\"\n    }}>{`Toast`}</h1>\n    <p>{`Utilize o componente de Toast para fornecer um feedback de alguma ação feita pelo usuário,\nque aparece sobreposto na página e desaparece depois de determinado tempo.`}</p>\n    <h3 {...{\n      \"id\": \"importação\"\n    }}>{`Importação`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Toast from '@eduzz/houston-ui/Toast';\n`}</code></pre>\n    <Hint type='warning' variant='outer' mdxType=\"Hint\">\n  Para o Toast funcionar, é necessário que ele esteja dentro de um ThemeProvider\n    </Hint>\n    <h3 {...{\n      \"id\": \"exemplo\"\n    }}>{`Exemplo`}</h3>\n    <Playground __position={1} __code={'() => {\\n  const handleShowToast = () => {\\n    Toast.success(\\'Exemplo de mensagem Toast\\')\\n  }\\n  const palette = {}\\n  return (\\n    <ThemeProvider palette={palette}>\\n      <Button onClick={handleShowToast}>Exibir Toast</Button>\\n    </ThemeProvider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Hint,\n      Playground,\n      Button,\n      Column,\n      Row,\n      ThemeProvider,\n      Toast,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const handleShowToast = () => {\n          Toast.success('Exemplo de mensagem Toast');\n        };\n\n        const palette = {};\n        return <ThemeProvider palette={palette} mdxType=\"ThemeProvider\">\n        <Button onClick={handleShowToast} mdxType=\"Button\">Exibir Toast</Button>\n      </ThemeProvider>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"variações\"\n    }}>{`Variações`}</h3>\n    <Playground __position={2} __code={'() => {\\n  const handleShowToast = React.useCallback(type => {\\n    const options = {\\n      onOpen: () => {\\n        console.log(\\'Função onOpen\\')\\n      },\\n      onClose: () => {\\n        console.log(\\'Função onClose\\')\\n      },\\n      onClick: () => {\\n        console.log(\\'Função onClick\\')\\n      },\\n    }\\n    switch (type) {\\n      case \\'success\\':\\n        Toast.success(\\'Exemplo de Toast de sucesso\\', options)\\n        break\\n      case \\'error\\':\\n        Toast.error(\\'Exemplo de Toast de erro\\', options)\\n        break\\n      default:\\n        Toast.info(\\'Exemplo de Toast informativo\\', options)\\n        Toast.info(\\n          \\'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Adipisci voluptatibus autem mollitia vero?\\',\\n        )\\n        break\\n    }\\n  }, [])\\n  const palette = {}\\n  return (\\n    <ThemeProvider palette={palette}>\\n      <Row>\\n        <Column>\\n          <Button\\n            variant=\\\"outlined\\\"\\n            onClick={() => handleShowToast(\\'success\\')}\\n          >\\n            Toast de Sucesso\\n          </Button>\\n        </Column>\\n        <Column>\\n          <Button variant=\\\"outlined\\\" onClick={() => handleShowToast(\\'error\\')}>\\n            Toast de Erro\\n          </Button>\\n        </Column>\\n        <Column>\\n          <Button variant=\\\"outlined\\\" onClick={() => handleShowToast(\\'info\\')}>\\n            Toast Informativo\\n          </Button>\\n        </Column>\\n      </Row>\\n    </ThemeProvider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Hint,\n      Playground,\n      Button,\n      Column,\n      Row,\n      ThemeProvider,\n      Toast,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const handleShowToast = React.useCallback(type => {\n          const options = {\n            onOpen: () => {\n              console.log('Função onOpen');\n            },\n            onClose: () => {\n              console.log('Função onClose');\n            },\n            onClick: () => {\n              console.log('Função onClick');\n            }\n          };\n\n          switch (type) {\n            case 'success':\n              Toast.success('Exemplo de Toast de sucesso', options);\n              break;\n\n            case 'error':\n              Toast.error('Exemplo de Toast de erro', options);\n              break;\n\n            default:\n              Toast.info('Exemplo de Toast informativo', options);\n              Toast.info('Lorem ipsum, dolor sit amet consectetur adipisicing elit. Adipisci voluptatibus autem mollitia vero?');\n              break;\n          }\n        }, []);\n        const palette = {};\n        return <ThemeProvider palette={palette} mdxType=\"ThemeProvider\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <Button variant='outlined' onClick={() => handleShowToast('success')} mdxType=\"Button\">\n              Toast de Sucesso\n            </Button>\n          </Column>\n          <Column mdxType=\"Column\">\n            <Button variant='outlined' onClick={() => handleShowToast('error')} mdxType=\"Button\">\n              Toast de Erro\n            </Button>\n          </Column>\n          <Column mdxType=\"Column\">\n            <Button variant='outlined' onClick={() => handleShowToast('info')} mdxType=\"Button\">\n              Toast Informativo\n            </Button>\n          </Column>\n        </Row>\n      </ThemeProvider>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"propriedades\"\n    }}>{`Propriedades`}</h3>\n    <p>{`Ao chamar o Toast, como segundo argumento você pode passar opções com os seguintes parâmetros:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`tipo`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`obrigatório`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`padrão`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`descrição`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onOpen`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`function`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`function`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Função chamada quando a notificação aparece`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onClose`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`function`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`function`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Função chamada quando a notificação desaparece`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onClick`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`function`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`function`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Função chamada ao clicar dentro da notificação Toast`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}