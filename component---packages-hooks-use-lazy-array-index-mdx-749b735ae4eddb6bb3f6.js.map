{"version":3,"sources":["webpack:///../packages/hooks/useLazyArray/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","useState","useCallback","CircularProgress","Button","Typography","Playground","useLazyArray","array","setArray","onClick","Array","fill","onReset","lazyArray","length","variant","map","a","index","key","size","parentName","isMDXComponent"],"mappings":"oTAcaA,G,UAAe,S,uNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAQ5E,kBACE,GAAM,gBADR,gBAGA,2LACA,YAAC,IAAD,CAAkBA,QAAQ,qBAC1B,yJACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,krBAAurBC,SAAO,GAC/tBJ,QACAH,kBACAQ,oBACAC,0BACAC,qBACAC,WACAC,eACAC,eACAC,kBAT+tB,gBAU/tBd,IAV+tB,EAW/tBH,eAX+tB,GAY9tBO,QAAQ,eACZ,WACK,MAA0BI,mBAAS,IAA5BO,EAAP,KAAcC,EAAd,KACMC,EAAUR,uBAAY,kBAAMO,EAAS,IAAIE,MAAM,KAAKC,KAAK,QAAO,IAChEC,EAAUX,uBAAY,kBAAMO,EAAS,MAAK,IAC1CK,EAAYP,YAAaC,GAC/B,OAAO,uBACP,YAAC,IAAD,CAAYX,QAAQ,cAApB,iBACiBW,EAAMO,OADvB,yBACqDD,EAAUC,QAE/D,YAAC,IAAD,CAAQL,QAASA,EAASb,QAAQ,UAAlC,qBACA,YAAC,IAAD,CAAQa,QAASG,EAASG,QAAQ,OAAOnB,QAAQ,UAAjD,SAGCiB,EAAUG,KAAI,SAACC,EAAGC,GAAJ,OAAc,mBAAKC,IAAKD,GACnC,YAAC,IAAD,CAAYE,KAAK,QAAQxB,QAAQ,cAAcsB,EAAQ,EAAvD,mBAKR,uBACA,YAAC,IAAD,CAAYrB,WAAY,EAAGC,OAAQ,8kBAAmlBC,SAAO,GAC3nBJ,QACAH,kBACAQ,oBACAC,0BACAC,qBACAC,WACAC,eACAC,eACAC,kBAT2nB,gBAU3nBd,IAV2nB,EAW3nBH,eAX2nB,GAY1nBO,QAAQ,eACZ,WACK,MAA0BI,mBAAS,IAA5BO,EAAP,KAAcC,EAAd,KACMC,EAAUR,uBAAY,kBAAMO,EAAS,IAAIE,MAAM,KAAKC,KAAK,QAAO,IAChEC,EAAUX,uBAAY,kBAAMO,EAAS,MAAK,IAChD,OAAO,uBACP,YAAC,IAAD,CAAYZ,QAAQ,cAApB,iBAAgDW,EAAMO,QACtD,YAAC,IAAD,CAAQL,QAASA,EAASb,QAAQ,UAAlC,wBACA,YAAC,IAAD,CAAQa,QAASG,EAASG,QAAQ,OAAOnB,QAAQ,UAAjD,SAGCW,EAAMS,KAAI,SAACC,EAAGC,GAAJ,OAAc,mBAAKC,IAAKD,GAC/B,YAAC,IAAD,CAAYE,KAAK,QAAQxB,QAAQ,cAAcsB,EAAQ,EAAvD,mBAKR,kBACE,GAAM,cADR,cAGA,yBACE,qBAAOG,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,aAGA,kBAAIA,WAAW,KACb,MAAS,MADX,eAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,QAGA,kBAAIA,WAAW,KACb,MAAS,MADX,uBAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,WAGA,kBAAIA,WAAW,KACb,MAAS,MADX,aAEiB,uBAFjB,gCAE0D,uBAF1D,iCAEoG,uBAFpG,c,qNAUV5B,EAAW6B,gBAAiB","file":"component---packages-hooks-use-lazy-array-index-mdx-749b735ae4eddb6bb3f6.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState, useCallback } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@eduzz/houston-ui/Button';\nimport Typography from '@eduzz/houston-ui/Typography';\nimport { Playground } from 'docz';\nimport useLazyArray from '.';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"uselazyarray\"\n    }}>{`useLazyArray`}</h1>\n    <p>{`Cria um novo array que adiciona o array original progressivamente aliviando o processo de render. Não é uma solução perfeita, ainda estamos estudando alterantivas`}</p>\n    <CircularProgress mdxType=\"CircularProgress\" />\n    <p>{`Use o loader acima como referência, quando é feito o render de muitos items ele congela, agora se usar o lazy ele não congelará.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [array, setArray] = useState([])\\n  const onClick = useCallback(() => setArray(new Array(200).fill(\\'a\\')), [])\\n  const onReset = useCallback(() => setArray([]), [])\\n  const lazyArray = useLazyArray(array)\\n  return (\\n    <div>\\n      <Typography>\\n        Array Length: {array.length} / Lazy Array Length: {lazyArray.length}\\n      </Typography>\\n      <Button onClick={onClick}>Add 200 with Lazy</Button>\\n      <Button onClick={onReset} variant=\\\"text\\\">\\n        Reset\\n      </Button>\\n      {lazyArray.map((a, index) => (\\n        <div key={index}>\\n          <Typography size=\\\"small\\\">{index + 1}. Value</Typography>\\n        </div>\\n      ))}\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      useCallback,\n      CircularProgress,\n      Button,\n      Typography,\n      Playground,\n      useLazyArray,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [array, setArray] = useState([]);\n        const onClick = useCallback(() => setArray(new Array(200).fill('a')), []);\n        const onReset = useCallback(() => setArray([]), []);\n        const lazyArray = useLazyArray(array);\n        return <div>\n        <Typography mdxType=\"Typography\">\n          Array Length: {array.length} / Lazy Array Length: {lazyArray.length}\n        </Typography>\n        <Button onClick={onClick} mdxType=\"Button\">Add 200 with Lazy</Button>\n        <Button onClick={onReset} variant='text' mdxType=\"Button\">\n          Reset\n        </Button>\n        {lazyArray.map((a, index) => <div key={index}>\n            <Typography size='small' mdxType=\"Typography\">{index + 1}. Value</Typography>\n          </div>)}\n      </div>;\n      }}\n    </Playground>\n    <br />\n    <Playground __position={3} __code={'() => {\\n  const [array, setArray] = useState([])\\n  const onClick = useCallback(() => setArray(new Array(200).fill(\\'a\\')), [])\\n  const onReset = useCallback(() => setArray([]), [])\\n  return (\\n    <div>\\n      <Typography>Array Length: {array.length}</Typography>\\n      <Button onClick={onClick}>Add 200 without Lazy</Button>\\n      <Button onClick={onReset} variant=\\\"text\\\">\\n        Reset\\n      </Button>\\n      {array.map((a, index) => (\\n        <div key={index}>\\n          <Typography size=\\\"small\\\">{index + 1}. Value</Typography>\\n        </div>\\n      ))}\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      useCallback,\n      CircularProgress,\n      Button,\n      Typography,\n      Playground,\n      useLazyArray,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [array, setArray] = useState([]);\n        const onClick = useCallback(() => setArray(new Array(200).fill('a')), []);\n        const onReset = useCallback(() => setArray([]), []);\n        return <div>\n        <Typography mdxType=\"Typography\">Array Length: {array.length}</Typography>\n        <Button onClick={onClick} mdxType=\"Button\">Add 200 without Lazy</Button>\n        <Button onClick={onReset} variant='text' mdxType=\"Button\">\n          Reset\n        </Button>\n        {array.map((a, index) => <div key={index}>\n            <Typography size='small' mdxType=\"Typography\">{index + 1}. Value</Typography>\n          </div>)}\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"parametros\"\n    }}>{`Parametros`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Parametro`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Descrição`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`data`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Array com os dados`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`options`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Objecto: {`}<br />{` `}{` `}{`chunckSize?: number; `}<br />{` `}{` `}{`intervalTime?: number;`}<br />{`}`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}