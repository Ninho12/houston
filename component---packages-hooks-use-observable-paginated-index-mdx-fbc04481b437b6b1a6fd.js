(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{Ieyq:function(e,a,o){"use strict";o.r(a),o.d(a,"_frontmatter",(function(){return i})),o.d(a,"default",(function(){return m}));var n=o("cxan"),r=o("+wNj"),t=(o("ERkP"),o("ZVZ0")),s=o("9Rvw"),i=(o("l1C2"),{});void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"packages/hooks/useObservablePaginated/index.mdx"}});var l={_frontmatter:i},d=s.a;function m(e){var a=e.components,o=Object(r.a)(e,["components"]);return Object(t.b)(d,Object(n.a)({},l,o,{components:a,mdxType:"MDXLayout"}),Object(t.b)("h1",{id:"useobservablepaginated"},"useObservablePaginated"),Object(t.b)("p",null,"Hook para facilitar o uso de um observable paginado, dá Subscribe e retorna\no resultado junto com funções de manipulação dos parametros."),Object(t.b)("h2",{id:"como-usar"},"Como usar"),Object(t.b)("pre",null,Object(t.b)("code",{parentName:"pre",className:"language-tsx"},"const { params, handleChangePage, handleChangePerPage, handleSort, result, total, isLoading } = useObservablePaginated(\n  {\n    initialParams: { page: 1, perPage: 5 }, // optional\n    infinityScroll: false, // optional\n    onChangeParams: params => salesService.list(params)\n  },\n  []\n);\n")),Object(t.b)("h2",{id:"cuidados"},"Cuidados"),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("strong",{parentName:"li"},"Erros")," ocorridos serão automaticamentes logados (não tratados) se as o ",Object(t.b)("strong",{parentName:"li"},"onUnhandledError")," no ",Object(t.b)("strong",{parentName:"li"},"setHoustonHooksConfig"),"\nfor setado, mas se utilizar o operador catchError esse erro não será logado pois foi previamente tratado,\nnesse caso o log deve ser feito manualmente.")),Object(t.b)("h2",{id:"parâmetros-e-retorno"},"Parâmetros e Retorno"),Object(t.b)("pre",null,Object(t.b)("code",{parentName:"pre",className:"language-ts"},"/**\n * @param options `IUsePaginatedOptions`: {\n *  initialParams: Estado inicial dos paramêtros\n *  infinityScroll: Se os resultados devem ser mergeado, criando uma lista infinita.\n *  onChangeParams: Função que recebe os paramêtros e retorna um Observable\n * }\n * @param deps React deps\n * @returns `IUsePaginatedObservable`: {\n *  params: P / Json com os parametros\n *  initialParams: Partial<P> / Json com os parametros iniciais, útil para um reset de filtros\n *  isLoading: boolean; / Se está carregando ou não\n *  isLoadingMore: boolean; / Se está carregando mais ou não, útil para o infinityScroll\n *  total: number; / Número total de linhas retornadas, apenas a requisição da pagina inicial é necessário retornar o total, as outras paginas podem retonar null\n *  result: R[]; / Array com o resultado\n *  hasMore: boolean; / Se existe mais para ser carregado, calculado com base do total, útil para o infinityScroll\n *  error: any; / Error, se aconteceu algum\n *  retry: () => void; / Função de retry\n *  updateInitialParams: React.Dispatch<React.SetStateAction<P>>; / Útil para alterar o reset de um filtro\n *  mergeParams: (params: PaginationMergeParams<P>) => void; / Função para atualizar os paramentros pode ser o valor em sí o uma função que recebe o valor atual\n *  handleChangePage: (page: number) => void; / Função de atalho para o mergeParams({ page: 1})\n *  handleChangePerPage: (perPage: number) => void; / Função de atalho para o mergeParams({ perPge: 1})\n *  handleSort: (sort: IPaginationParams['sort']) => void; / Função de atalho para o mergeParams({ sort: { field: 'name', direction: 'asc' }  })\n * }\n */\nexport default function useObservablePaginated<P extends IPaginationParams, R>(options: IUsePaginatedOptions<P, R>, , deps: React.DependencyList): IUsePaginatedObservable<P, R>\n")))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"packages/hooks/useObservablePaginated/index.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---packages-hooks-use-observable-paginated-index-mdx-fbc04481b437b6b1a6fd.js.map