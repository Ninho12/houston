{"version":3,"sources":["webpack:///../packages/ui-components/styles/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qRAQaA,EAAe,Q,yNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,kBADR,kBAGA,+QAEA,kBACE,GAAM,OADR,OAGA,8HACA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,mLAOL,kBACE,GAAM,gBADR,gBAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,QAGA,kBAAIA,WAAW,KACb,MAAS,MADX,QAGA,kBAAIA,WAAW,KACb,MAAS,MADX,eAGA,kBAAIA,WAAW,KACb,MAAS,MADX,YAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,WAGA,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,kBACH,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,UACH,kBAAIA,WAAW,KACb,MAAS,MADX,kBAMN,kBACE,GAAM,6BADR,+BAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,ipCAmEL,kBACE,GAAM,uCADR,uCAGA,+IACA,kBACE,GAAM,0BADR,2BAGA,+MAEA,qBAAG,kBAAIA,WAAW,KAAf,2HAAH,KACF,kBAAIA,WAAW,KAAf,8HADE,KAEF,kBAAIA,WAAW,KAAf,2CACE,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,8lBA8BL,kBACE,GAAM,mBADR,mBAGA,mHACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,sNASL,kBACE,GAAM,iBADR,iBAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,8qD,uNAgFTJ,EAAWK,gBAAiB","file":"component---packages-ui-components-styles-index-mdx-ef2e299d9657a90f5b95.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tema-e-estilos\"\n    }}>{`Tema e Estilos`}</h1>\n    <p>{`O provedor de temas (ThemeProvider) não substituirá o tema atual do projeto por completo, apenas estilizará os componentes do Houston,\npossibilitando a migração de componentes gradativamente sem interferir na estilização já existente do projeto.`}</p>\n    <h2 {...{\n      \"id\": \"uso\"\n    }}>{`Uso`}</h2>\n    <p>{`No arquivo raiz de seu projeto, defina sua paleta de cores e adicione o provedor da seguinte maneira:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import ThemeProvider from '@eduzz/houston-ui/styles/ThemeProvider';\n\nconst palette: IThemePalette = {}; // Opcional\n<ThemeProvider palette={palette}>...</ThemeProvider>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"propriedades\"\n    }}>{`Propriedades`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`tipo`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`obrigatório`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`padrão`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`palette`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`IThemePalette`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tema Padrão`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"tema-padrão-ithemepalette\"\n    }}>{`Tema padrão (IThemePalette)`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  background: {\n    paper: '#fff',\n    default: '#F9FAFB'\n  },\n  common: {\n    black: '#000',\n    white: '#fff'\n  },\n  error: {\n    light: '#FDD9D7',\n    main: '#F44336',\n    dark: '#B8160A',\n    contrastText: '#fff'\n  },\n  grey: {\n    50: '#fafafa',\n    100: '#F9FAFB',\n    200: '#ECEFF1',\n    300: '#B0BEC5',\n    400: '#78909C',\n    500: '#546E7A',\n    600: '#37474F',\n    700: '#373737',\n    800: '#272727',\n    900: '#1E1E1E'\n  },\n  warning: {\n    main: '#FFCA28',\n    dark: '#E5AD00',\n    light: '#FFF4D4',\n    contrastText: '#37474F'\n  },\n  primary: {\n    light: '#9EB5D9',\n    main: '#0D47A1',\n    dark: '#072D83',\n    contrastText: '#fff'\n  },\n  secondary: {\n    light: '#ECEFF1',\n    main: '#78909C',\n    dark: '#37474F',\n    contrastText: '#fff'\n  },\n  info: {\n    light: '#E6F5FC',\n    main: '#039BE5',\n    dark: '#0277B0',\n    contrastText: '#fff'\n  },\n  success: {\n    light: '#D2EBD3',\n    main: '#4caf50',\n    dark: '#388e3c',\n    contrastText: 'rgba(0, 0, 0, 0.87)'\n  },\n  text: {\n    disabled: '#B0BEC5',\n    hint: '#B0BEC5',\n    primary: '#546E7A',\n    secondary: '#78909C'\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"criando-estilos-baseados-no-houston\"\n    }}>{`Criando Estilos Baseados no Houston`}</h2>\n    <p>{`Caso seja necessário é possível criar estilos usando o tema do houston como base, existem duas maneiras de fazer isso:`}</p>\n    <h3 {...{\n      \"id\": \"createusestyleusestyle\"\n    }}>{`createUseStyle/useStyle`}</h3>\n    <p>{`Esse hook utiliza o JSS e cria as classes para a estilização, cada key do json pode ser um json simples ou uma função\nque recebe o theme e as props do componente que irá utilizá-lo.`}</p>\n    <p><em parentName=\"p\">{`Por causa de uma limitação do Typescript não é possível passar o IProps como generic sem peder a inferência do retorno,`}</em>{`\n`}<em parentName=\"p\">{`perdendo assim o autocomplete dos nomes das classes criadas, por isso sugerimos tipar a função os parametros da função com`}</em>{`\n`}<em parentName=\"p\">{`o seu IProps conforme o exemplo abaixo`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import createUseStyle from '@eduzz/houston-ui/styles/createUseStyles';\n\ninterface IProps {\n  success: boolean;\n}\n\nconst useStyle = createUseStyle(theme => ({\n  simple: {\n    color: 'red'\n  },\n  content: (props: IProps) => {\n    return {\n      backgroundColor: props.success ? theme.colors.success.main : theme.colors.error.main\n    };\n  }\n}));\n\nconst ComponentsDev = memo<IProps>(props => {\n  const styles = useStyle(props);\n\n  return (\n    <div className={styles.content}>\n      <span className={styles.simple}>Teste</span>\n      <Button>Teste</Button>\n    </div>\n  );\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usehoustontheme\"\n    }}>{`useHoustonTheme`}</h3>\n    <p>{`Caso queria apenas utlizar as variáveis sem criar um estilo é possível utilizar esse hook.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import useHoustonTheme from '@eduzz/houston-ui/styles/useHoustonTheme';\n\nconst ComponentsDev = memo<IProps>(props => {\n  const theme = useHoustonTheme();\n  return <div>Tamanho: {theme.size()}</div>;\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"tema-completo\"\n    }}>{`Tema completo`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`type HoustonTheme = {\n  fontFamily: 'Open Sans, \"Helvetica Neue\", Arial, sans-serif',\n  radius: (unit = 1) => 4 * unit,\n  spacing: (unit = 4) => 4 * unit,\n  textSize: (size: FontSizes = 'normal') => fontSizes[size],\n  lineHeight: (size: LineHeights = 'normal') => lineHeights[size],\n  fontWeight: (size: FontWeight = 'regular') => fontWeight[size],\n  breakpoints: 'same as MaterialUI',\n  colors: {\n    background: {\n      paper: '#fff',\n      default: '#F9FAFB'\n    },\n    common: {\n      black: '#000',\n      white: '#fff'\n    },\n    error: {\n      light: '#FDD9D7',\n      main: '#F44336',\n      dark: '#B8160A',\n      contrastText: '#fff'\n    },\n    grey: {\n      50: '#fafafa',\n      100: '#F9FAFB',\n      200: '#ECEFF1',\n      300: '#B0BEC5',\n      400: '#78909C',\n      500: '#546E7A',\n      600: '#37474F',\n      700: '#373737',\n      800: '#272727',\n      900: '#1E1E1E'\n    },\n    warning: {\n      main: '#FFCA28',\n      dark: '#E5AD00',\n      light: '#FFF4D4',\n      contrastText: '#37474F'\n    },\n    primary: {\n      light: '#9EB5D9',\n      main: '#0D47A1',\n      dark: '#072D83',\n      contrastText: '#fff'\n    },\n    secondary: {\n      light: '#ECEFF1',\n      main: '#78909C',\n      dark: '#37474F',\n      contrastText: '#fff'\n    },\n    info: {\n      light: '#CDEBFA',\n      main: '#039BE5',\n      dark: '#0277B0',\n      contrastText: '#fff'\n    },\n    success: {\n      light: '#D2EBD3',\n      main: '#4caf50',\n      dark: '#388e3c',\n      contrastText: 'rgba(0, 0, 0, 0.87)'\n    },\n    text: {\n      disabled: '#B0BEC5',\n      hint: '#B0BEC5',\n      primary: '#546E7A',\n      secondary: '#78909C'\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}