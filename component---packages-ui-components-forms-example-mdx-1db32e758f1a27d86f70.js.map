{"version":3,"sources":["webpack:///../packages/ui-components/Forms/example.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","moneyMask","useForm","Playground","Button","Form","SelectField","TextField","form","initialValues","money","validationSchema","yup","object","shape","name","string","required","number","min","option","onSubmit","Promise","resolve","setTimeout","options","React","value","label","disabled","context","mask","type","loading","isSubmitting","variant","isMDXComponent"],"mappings":"2WAeaA,EAAe,Q,0NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,kBACE,GAAM,wBADR,wBAGA,yEACA,mMAEA,kBACE,GAAM,cADR,cAGA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,eADZ,4GAKL,kBACE,GAAM,WADR,WAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,8xDAAizDC,SAAO,GACz1DL,QACAH,kBACAS,cACAC,YACAC,eACAC,WACAC,SACAC,gBACAC,eATy1D,gBAUz1Df,IAVy1D,EAWz1DH,eAXy1D,GAYx1DO,QAAQ,eACZ,WACK,IAAMY,EAAON,YAAQ,CACnBO,cAAe,CACbC,MAAO,GAGTC,iBAAkB,SAAAC,GAEhB,OAAOA,EAAIC,SAASC,MAAM,CACxBC,KAAMH,EAAII,SAASC,WACnBP,MAAOE,EAAIM,SAASC,IAAI,IACxBC,OAAQR,EAAIM,SAASC,IAAI,MAG7BE,SAAU,WAGR,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,kBAAMD,EAAQ,QAAO,WAI/BE,EAAWC,YAAe,iBAAM,CAAC,CACtCC,MAAO,EACPC,MAAO,YACN,CACDD,MAAO,EACPC,MAAO,YACN,CACDD,MAAO,EACPC,MAAO,sBACPC,UAAU,GAEZ,CACEF,MAAO,EACPC,MAAO,YACN,CACDD,MAAO,EACPC,MAAO,gBAhBT,GAkBA,OACE,WADM,CACL,IAAD,CAAME,QAAStB,EAAMZ,QAAQ,QAI/B,YAAC,IAAD,CAAWgC,MAAM,OAAOb,KAAK,OAAOnB,QAAQ,cAI5C,YAAC,IAAD,CAAWgC,MAAM,QAAQb,KAAK,QAAQgB,KAAM9B,IAAWL,QAAQ,cAC/D,YAAC,IAAD,CAAagC,MAAM,UAAUb,KAAK,SAASU,QAASA,EAAS7B,QAAQ,gBAIrE,YAAC,IAAD,CAAQoC,KAAK,SAASC,QAASzB,EAAK0B,aAActC,QAAQ,UAA1D,UAMA,YAAC,IAAD,CAAQuC,QAAQ,OAAOH,KAAK,QAAQH,SAAUrB,EAAK0B,aAActC,QAAQ,UAAzE,aAOJ,kBACE,GAAM,gCADR,gCAGA,uJAEA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,mIAAwIC,SAAO,GAChLL,QACAH,kBACAS,cACAC,YACAC,eACAC,WACAC,SACAC,gBACAC,eATgL,gBAUhLf,IAVgL,EAWhLH,eAXgL,GAY/KO,QAAQ,eACZ,WACK,IAAMY,EAAON,YAAQ,CACnBmB,SAAU,eAEZ,OAAO,YAAC,IAAD,CAAWO,MAAM,OAAOb,KAAK,OAAOP,KAAMA,EAAMZ,QAAQ,iBAGnE,kBACE,GAAM,kDADR,kDAGA,wFAAuE,iBAAGC,WAAW,IACjF,KAAQ,mEAD2D,wBAAvE,KAGA,kBACE,GAAM,gBADR,gBAGA,kBACE,GAAM,cADR,cAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,QAGA,kBAAIA,WAAW,KACb,MAAS,MADX,QAGA,kBAAIA,WAAW,KACb,MAAS,MADX,eAGA,kBAAIA,WAAW,KACb,MAAS,MADX,YAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,WAGA,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,iBACH,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,SACH,kBAAIA,WAAW,KACb,MAAS,MADX,QAMN,kBACE,GAAM,iBADR,iBAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,QAGA,kBAAIA,WAAW,KACb,MAAS,MADX,QAGA,kBAAIA,WAAW,KACb,MAAS,MADX,eAGA,kBAAIA,WAAW,KACb,MAAS,MADX,eAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,iBAGA,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,iBACH,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,UACH,kBAAIA,WAAW,KACb,MAAS,MADX,oFAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,oBAGA,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,aACH,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,UACH,kBAAIA,WAAW,KACb,MAAS,MADX,sHAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,sBAGA,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,aACH,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,UACH,kBAAIA,WAAW,KACb,MAAS,MADX,iCAEqC,0BAAYA,WAAW,MAAvB,UAFrC,oBAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,YAGA,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,YAFH,KAE8D,0BAAYA,WAAW,MAAvB,gBAF9D,KAE6H,0BAAYA,WAAW,MAAvB,oBAC7H,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,SACH,kBAAIA,WAAW,KACb,MAAS,MADX,qBAEyB,0BAAYA,WAAW,MAAvB,WAFzB,UAEwF,0BAAYA,WAAW,MAAvB,cAFxF,sCAEsL,0BAAYA,WAAW,MAAvB,0B,wNAQhMJ,EAAW2C,gBAAiB","file":"component---packages-ui-components-forms-example-mdx-1db32e758f1a27d86f70.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport moneyMask from '@eduzz/houston-forms/masks/money';\nimport useForm from '@eduzz/houston-forms/useForm';\nimport { Playground } from 'docz';\nimport Button from '../Button';\nimport Form from './Form';\nimport SelectField from './Select';\nimport TextField from './Text';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"exemplo-de-validação\"\n    }}>{`Exemplo de Validação`}</h1>\n    <p>{`Este é um exemplo utilzando o @eduzz/houston-ui.`}</p>\n    <p>{`O componente de formulário (Form) é utilizado para a criação, validação e controle de formulários de uma aplicação,\npodendo ser utilizado através de um contexto ou hook.`}</p>\n    <h3 {...{\n      \"id\": \"importação\"\n    }}>{`Importação`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useForm from '@eduzz/houston-forms/useForm';\nimport Form from '@eduzz/houston-ui/Forms/Form';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"exemplo\"\n    }}>{`Exemplo`}</h3>\n    <Playground __position={0} __code={'() => {\\n  const form = useForm({\\n    initialValues: { money: 5 }, //estado inicial, não precisa passar todas as propriedades\\n    validationSchema: yup => {\\n      // não é necessário importar o yup ele será passado como argumento\\n      return yup.object().shape({\\n        name: yup.string().required(),\\n        money: yup.number().min(10),\\n        option: yup.number().min(3),\\n      })\\n    },\\n    onSubmit: () => {\\n      // onSubmit pode retornar uma promise ou um observable de rxjs, desse jeito ele irá\\n      // setar corretamente o isSubmitting\\n      return new Promise(resolve => {\\n        setTimeout(() => resolve(null), 3000)\\n      })\\n    },\\n  })\\n  const [options] = React.useState(() => [\\n    { value: 1, label: \\'Option 1\\' },\\n    { value: 2, label: \\'Option 2\\' },\\n    { value: 3, label: \\'Option 3 (disabled)\\', disabled: true }, // é possível desativar alguma opção\\n    { value: 4, label: \\'Option 4\\' },\\n    { value: 5, label: \\'Option 5\\' },\\n  ])\\n  return (\\n    //Criando o contexto do form não é preciso passar para os components filhos\\n    <Form context={form}>\\n      {/* a prop name que irá dizer o campo que receberá o valor */}\\n      <TextField label=\\\"Name\\\" name=\\\"name\\\" />\\n      {/* você passar uma função de mascara, você pode importar uma pronta ou criar a sua */}\\n      <TextField label=\\\"Money\\\" name=\\\"money\\\" mask={moneyMask} />\\n      <SelectField label=\\\"Options\\\" name=\\\"option\\\" options={options} />\\n      {/* Por ser um type submit não precisa passar o form.handleSubmit */}\\n      <Button type=\\\"submit\\\" loading={form.isSubmitting}>\\n        Submit\\n      </Button>\\n      {/* Por ser um type reset não precisa passar o form.handleReset */}\\n      <Button variant=\\\"text\\\" type=\\\"reset\\\" disabled={form.isSubmitting}>\\n        Reset\\n      </Button>\\n    </Form>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      moneyMask,\n      useForm,\n      Playground,\n      Button,\n      Form,\n      SelectField,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const form = useForm({\n          initialValues: {\n            money: 5\n          },\n          //estado inicial, não precisa passar todas as propriedades\n          validationSchema: yup => {\n            // não é necessário importar o yup ele será passado como argumento\n            return yup.object().shape({\n              name: yup.string().required(),\n              money: yup.number().min(10),\n              option: yup.number().min(3)\n            });\n          },\n          onSubmit: () => {\n            // onSubmit pode retornar uma promise ou um observable de rxjs, desse jeito ele irá\n            // setar corretamente o isSubmitting\n            return new Promise(resolve => {\n              setTimeout(() => resolve(null), 3000);\n            });\n          }\n        });\n        const [options] = React.useState(() => [{\n          value: 1,\n          label: 'Option 1'\n        }, {\n          value: 2,\n          label: 'Option 2'\n        }, {\n          value: 3,\n          label: 'Option 3 (disabled)',\n          disabled: true\n        }, // é possível desativar alguma opção\n        {\n          value: 4,\n          label: 'Option 4'\n        }, {\n          value: 5,\n          label: 'Option 5'\n        }]);\n        return (//Criando o contexto do form não é preciso passar para os components filhos\n          <Form context={form} mdxType=\"Form\">\n        {\n              /* a prop name que irá dizer o campo que receberá o valor */\n            }\n        <TextField label='Name' name='name' mdxType=\"TextField\" />\n        {\n              /* você passar uma função de mascara, você pode importar uma pronta ou criar a sua */\n            }\n        <TextField label='Money' name='money' mask={moneyMask} mdxType=\"TextField\" />\n        <SelectField label='Options' name='option' options={options} mdxType=\"SelectField\" />\n        {\n              /* Por ser um type submit não precisa passar o form.handleSubmit */\n            }\n        <Button type='submit' loading={form.isSubmitting} mdxType=\"Button\">\n          Submit\n        </Button>\n        {\n              /* Por ser um type reset não precisa passar o form.handleReset */\n            }\n        <Button variant='text' type='reset' disabled={form.isSubmitting} mdxType=\"Button\">\n          Reset\n        </Button>\n      </Form>\n        );\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"sem-o-contexto-de-formulário\"\n    }}>{`Sem o contexto de formulário`}</h3>\n    <p>{`Também é possível utilizar o componente de formulário sem utilizá-lo como um contexto,\npassando o formulário via propriedade:`}</p>\n    <Playground __position={1} __code={'() => {\\n  const form = useForm({\\n    onSubmit: () => {},\\n  })\\n  return <TextField label=\\\"Name\\\" name=\\\"name\\\" form={form} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      moneyMask,\n      useForm,\n      Playground,\n      Button,\n      Form,\n      SelectField,\n      TextField,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const form = useForm({\n          onSubmit: () => {}\n        });\n        return <TextField label='Name' name='name' form={form} mdxType=\"TextField\" />;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"hooks-para-validação-de-formulários-e-máscaras\"\n    }}>{`Hooks para validação de formulários e máscaras`}</h3>\n    <p>{`Veja os hooks do Houston para validar formulários e máscaras em `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/eduzz/houston/tree/master/src/packages/forms\"\n      }}>{`@eduzz/houston-forms`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"propriedades\"\n    }}>{`Propriedades`}</h3>\n    <h3 {...{\n      \"id\": \"form-props\"\n    }}>{`Form props`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`tipo`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`obrigatório`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`padrão`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`context`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`IFormAdapter`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"useform-props\"\n    }}>{`useForm props`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`tipo`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`obrigatório`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`descrição`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`initialValues`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Partial<any>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Estado inicial do formulário, não sendo necessário passar todas as propriedades`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`validationSchema`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`function`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Utilizado para validação do formulário, não sendo necessário importar o yup, pois ele será passado como argumento`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onSubmitWithErrors`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`function`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`false`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`É possível passar os erros do `}<inlineCode parentName=\"td\">{`Formik`}</inlineCode>{` como argumento`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onSubmit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`function`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`Promise<any>`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`Observable<any>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Pode retornar uma `}<inlineCode parentName=\"td\">{`Promise`}</inlineCode>{` ou um `}<inlineCode parentName=\"td\">{`Observable`}</inlineCode>{` em RxJS, definindo corretamente o `}<inlineCode parentName=\"td\">{`isSubmitting`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}