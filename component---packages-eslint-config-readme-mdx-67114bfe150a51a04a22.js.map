{"version":3,"sources":["webpack:///../packages/eslint-config/README.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oRAQaA,EAAe,Q,mNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,iBADR,iBAGA,0LAEA,kBACE,GAAM,SADR,SAGA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,eADZ,sTAIL,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,iLAYL,kBACE,GAAM,gBADR,iBAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,iVAIL,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,wLAYL,kBACE,GAAM,QADR,QAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,wQAIL,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,sLAYL,kBACE,GAAM,wBADR,wBAGA,kBACE,GAAM,UADR,UAGA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,0BAA8C,iBAAGA,WAAW,IACxD,KAAQ,8EADkC,UAA9C,MAGN,sBAAQA,WAAW,KAAnB,qGAEI,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,+HAGJ,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,2WAeL,kBACE,GAAM,eADR,eAGA,gFAA+D,sBAAQA,WAAW,KAAnB,+BAA/D,4GAC+D,sBAAQA,WAAW,KAAnB,aAD/D,8FAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,uSAYL,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,UAGA,kBAAIA,WAAW,KACb,MAAS,MADX,YAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,kBAGA,kBAAIA,WAAW,KACb,MAAS,MADX,4BAEkC,uBAFlC,2BAEoE,uBAFpE,2EAMN,qBAAG,sBAAQA,WAAW,KAAnB,uGACH,kBACE,GAAM,kBADR,kBAGA,4FAA2E,iBAAGA,WAAW,IACrF,KAAQ,oFAD+D,oBAA3E,2BAIA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,uFAKL,sCACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,uHASL,kCACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,2L,iNAeTJ,EAAWK,gBAAiB","file":"component---packages-eslint-config-readme-mdx-67114bfe150a51a04a22.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/github/workspace/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"eslint-config\"\n    }}>{`ESLint Config`}</h1>\n    <p>{`Para configurar no padrão do Houston, primerio você deve adicionar as dependências, pois o eslint exige que plugins devem,\nser adicionados no projeto principal:`}</p>\n    <h2 {...{\n      \"id\": \"react\"\n    }}>{`React`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`yarn add --dev @eduzz/eslint-config-houston @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-prettier eslint-plugin-eslint-plugin eslint-plugin-import eslint-plugin-prettier eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-unused-imports eslint-plugin-sonarjs prettier\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// .eslintrc\n{\n  \"extends\": [\"@eduzz/eslint-config-houston\"]\n}\n\n// .prettierrc.js\nmodule.exports = {\n  ...require('@eduzz/eslint-config-houston/.prettierrc')\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"react-native\"\n    }}>{`React Native:`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`yarn add --dev @eduzz/eslint-config-houston eslint-plugin-react-native @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-prettier eslint-plugin-eslint-plugin eslint-plugin-import eslint-plugin-prettier eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-unused-imports eslint-plugin-sonarjs prettier\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// .eslintrc\n{\n  \"extends\": [\"@eduzz/eslint-config-houston/native\"]\n}\n\n// .prettierrc.js\nmodule.exports = {\n  ...require('@eduzz/eslint-config-houston/.prettierrc')\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"node\"\n    }}>{`Node`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`yarn add --dev @eduzz/eslint-config-houston @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-prettier eslint-plugin-eslint-plugin eslint-plugin-import eslint-plugin-prettier eslint-plugin-unused-imports eslint-plugin-sonarjs prettier\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// .eslintrc\n{\n  \"extends\": [\"@eduzz/eslint-config-houston/node\"]\n}\n\n// .prettierrc.js\nmodule.exports = {\n  ...require('@eduzz/eslint-config-houston/.prettierrc')\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"configurações-extras\"\n    }}>{`Configurações Extras`}</h2>\n    <h3 {...{\n      \"id\": \"vscode\"\n    }}>{`VSCode`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Adicione a extensão do `}<a parentName=\"p\" {...{\n            \"href\": \"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\"\n          }}>{`ESLint`}</a>{`.\n`}<strong parentName=\"p\">{`SUGERIMOS DESISTALAR OU DESATIVAR A EXTENSÃO DO PRETTIER POIS O ESLINT QUE APLICARÁ O PRETTIER.`}</strong></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Crie/Adicione no .vscode/settings.json (não na suas configurações, pois assim ficará no projeto e o time já terá acesso):`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  //... suas configurações\n  \"editor.codeActionsOnSave\": {\n    \"source.organizeImports\": false,\n    \"source.fixAll.eslint\": true\n  },\n  \"eslint.validate\": [\"javascript\", \"javascriptreact\", \"typescript\", \"typescriptreact\"],\n  \"editor.formatOnPaste\": false,\n  \"editor.formatOnSave\": false,\n  \"editor.formatOnType\": false,\n  \"editor.tabSize\": 2\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"react-hooks\"\n    }}>{`React Hooks`}</h3>\n    <p>{`Para que o eslint verifique e aplica a regra correta do `}<strong parentName=\"p\">{`react-hooks/exhaustive-deps`}</strong>{` é preciso adicionar seus custom hooks\nnas regras do .eslintrc, para facilitar esse processo criamos um `}<strong parentName=\"p\">{`generator`}</strong>{`. Já adicionados todos os hooks do Houston,\nmas caso queria adicionar os do seu proejeto:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// .eslintrc.js <~precisa ser .js\nconst generator = require('@eduzz/eslint-config-houston/generator');\n\nmodule.exports = {\n  extends: ['@eduzz/eslint-config-houston'],\n  rules: {\n    'react-hooks/exhaustive-deps': generator.exhaustiveDeps('warn', ['useMyCustomHook', true])\n  }\n};\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Método`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Params`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`exhaustiveDeps`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`1. 'warn' `}{`|`}{` 'error'`}<br />{`2. Array com seus hooks `}<br />{`3. boolean se deve ou não adicionar os hooks do @eduzz/houston-hooks`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`⚠️ Vale ressaltar que os custom hooks devem seguir o padrão de que o segundo parametro seja a deps`}</strong></p>\n    <h3 {...{\n      \"id\": \"react-17-e-jsx\"\n    }}>{`React 17 e JSX`}</h3>\n    <p>{`Para utilizar a nova versão do React com jsx-runtime basta seguir o `}<a parentName=\"p\" {...{\n        \"href\": \"https://pt-br.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\"\n      }}>{`tutorial do blog`}</a>{`,\nmas resumidamente é:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Removendo Imports React não Utilizadas\nnpx react-codemod update-react-imports\n`}</code></pre>\n    <p>{`tsconfig.json`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  //... suas configurações\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\" //Troque esse configuração\n  }\n}\n`}</code></pre>\n    <p>{`.eslintrc`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"extends\": [\"@eduzz/eslint-config-houston\"],\n  \"rules\": {\n    //Adicione essas rules\n    \"react/jsx-uses-react\": \"off\",\n    \"react/react-in-jsx-scope\": \"off\"\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}